# This creates a set of graphs. I do not know how to test 
# the graph classes except visually. Therefore, this simulation
# creates a variety of graphs and includes latex that describes
# what each graph should look like.
#
# Copyright(c) 2003 David Harrison. 
# Copyright(c) 2004 David Harrison. 
# Copyright(c) 2005 David Harrison.
# Released under the terms of the GNU Public License.

source $env(NS)/tcl/rpi/graph.tcl
source $env(NS)/tcl/rpi/options.tcl  ;# contains paths to apps.

Agent/TCP set window_ 1000000
Queue set limit_ 50
xdvi set suppress_warnings_ true

# FIND IN PATH will search the path for a given program.
proc find-in-path { filename } {
  set result ""
  catch {
    set result [exec which $filename]
  } err

  if { $result != "" && [file exists $result] } {
    return $result
  }

  # else result is empty or does not refer to a valid file.
  return ""
}


if { $xgraph_app_path_ == "" && $gnuplot_app_path_ == ""  } {
  puts "\nFAIL!! Aborting tests.  Neither xgraph nor gnuplot could be found\
    in the PATH.  Without at least one of these applications, the graph\
    package cannot function."
  exit -1
}

if { $xgraph_app_path_ == "" } {
  puts "
  Because xgraph was not found, the graph package
  cannot use the xgraph plot device.  Skipping xgraph tests."
}

if { $gnuplot_app_path_ == "" } {
  puts "
  Because gnuplot was not found, the graph package cannot use the gnuplot,
  acroread, fig, latex, ghostview, postscript, and xdvi plot devices.
  Skipping these tests."
}

if { $ghostview_app_path_ == "" } {
  puts "
  Because ghostview was not found, the graph package cannot
  use the ghostview plot device.  Skipping ghostview tests."
}

if { $latex_app_path_ == "" } {
  puts "\
  Because latex was not found, the graph package cannot use the latex
  and xdvi plot devices. Skipping latex and xdvi tests."
}

if { $xdvi_app_path_ == "" } {
  puts "  
  Because xdvi was not found, the graph package cannot use the xdvi
  plot device.  Skipping xdvi tests."
}

if { $pdflatex_app_path_ == "" } {
  puts "
  Because pdflatex was not found, the graph package cannot use the
  the acroread plot device.  Skipping acroread tests."
}

if { $acroread_app_path_ == "" } {
  puts "
  Because acroread was not found, the graph package cannot use the
  acroread plot device.  Skipping acroread tests."
}

if { $xgraph_app_path_ == "" ||
     $gnuplot_app_path_ == "" ||
     $latex_app_path_ == "" ||
     $xdvi_app_path_ == "" ||
     $pdflatex_app_path_ == "" ||
     $acroread_app_path_ == "" } {
  puts "\nNOTE: One or more applications used by the RPI
graph and statistics package have not been found.  If these
applications are installed on your system then re-run
the configuration script \$NS/tcl/rpi/configuration.tcl

Without these applications, all graphs will still be 
displayable, but you will not be able to use the plot 
devices that depend on the missing applications."
  puts "\nPress return to continue or hit ctrl-c to abort."
  flush stdout
  gets stdin
}

# ns-2.1b5 creates TCP packets of size "Agent/TCP set packetSize_"
# while ns-2.1b9a and ns-2.26 create TCP packets of size
# "Agent/TCP set packetSize + Agent/TCP set tcpip_base_hdr_size_".
if { $env(NSVER) == "2.1b5" } {
  Agent/TCP set packetSize_ \
    [expr [Agent/TCP set packetSize_] + [Agent/TCP set tcpip_base_hdr_size_]]
}

Graph set plot_device_ [new postscript]

set ns [new Simulator]
#use-nam

if { ![info exists tmp_directory_] } {
  set tmp_directory_ [create-tmp-directory]
}
set old_dir [pwd]
exec cp graph-test-topology.eps $tmp_directory_

if { $latex_app_path_ != "" } {
  set latex [open "$tmp_directory_/graph-test-output.tex" w]

  puts $latex {
    \documentclass[11pt]{article}
    \usepackage{graphicx,fullpage}
    \topmargin=-1in
    \hoffset -0.5in
    \voffset -0.4in % for LaserWriter
    \setlength{\oddsidemargin}{0.5in}
    \setlength{\evensidemargin}{0.5in}
    \setlength{\topmargin}{-0.5in} 
    \textheight 9.5in
    \textwidth 6.5in
    \parindent 0pt
    \parskip 2ex 
    \renewcommand{\baselinestretch}{1.5} 
    \begin{document}
    \title{Graph Package Test Output} 
    \date{}
    \maketitle
  
    \begin{abstract}
  
    This file was generated by the graph-test.tcl script.  It contains 
    test output for the Graph classes defined in 
    \verb|$NS/tcl/rpi/graph.tcl|.  This script uses the \verb|postscript|
    plot device class to output an instance of each
    supported Graph class and presents the graph alongside a graph
    generated by my Linux laptop.  We defer
    to visual comparisons and textual explanation to determine if the 
    graphs are correct.
    
    \end{abstract}
  
    \section{Introduction}
  
    The graphs we use for comparison were generated on a Linux box with the 
    environment and tools specified in Table~\ref{EnvironmentTable}.  The 
    binary output for your files will differ from our output because gnuplot
    embeds information like creation date in the output postscript.  
    In this version of the test suite, we do not search through the postscript
    to determine whether the files actually contain identical data.
    Furthermore, other cosmetic differences may exist between files generated
    by different versions of the same tool, thus we rely only
    on visual comparisons to determine correctness.  If two graphs
    appear substantially different or if a graph fails to be generated
    then you may need to upgrade to a more recent version of the 
    corresponding tools.
  
    All of these tests are performed on a single simulation with the
    topology shown in Figure~\ref{TopoFigure}. Here s0 transfers a large file
    to d0, and s1 transfers a large file to d1. 
  }
  if { $env(NSVER) == "2.1b5" } {  
    puts $latex {
      \begin{table}\label{EnvironmentTable}
      \begin{center}
      \caption{Environment and tools used in generating comparison graphs.}
      \begin{tabular}{|l|c|}
      \hline
      Linux distribution   &  RedHat 8.0    \\
      Kernel               &  2.4.18-14  \\
      ns                   &  ns-2.1b5      \\
      gnuplot              &  3.7 patchlevel 2 \\
      latex uses TeX       &  3.14159       \\
      pdflatex uses pdfTeX &  3.14159-14h   \\
      xgraph               &  12.1  \\
      acroread             &  5.0.5     \\
      xdvi                 &  22.05d-k \\
      
    }
  } else {
    if { $env(NSVER) == "2.27" } {
      puts $latex {
        \begin{table}\label{EnvironmentTable}
        \begin{center}
        \caption{Environment and tools used in generating comparison graphs.}
        \begin{tabular}{|l|c|}
        \hline
        Linux distribution   &  RedHat 8.0    \\
        Kernel               &  2.4.18-14  \\
        ns                   &  ns-2.27     \\
        gnuplot              &  3.7 patchlevel 2 \\
        latex uses TeX       &  3.14159       \\
        pdflatex uses pdfTeX &  3.14159-14h   \\
        xgraph               &  12.1 (from ns-allinone-2.27) \\
        acroread             &  5.0.5     \\
        xdvi                 &  22.05d-k \\
      }
    } else {
      ;# ns-2.28 or later compare against results from ns-2.28.
      puts $latex {
        \begin{table}\label{EnvironmentTable}
        \begin{center}
        \caption{Environment and tools used in generating comparison graphs.}
        \begin{tabular}{|l|c|}
        \hline
        Linux distribution   &  RedHat 8.0    \\
        Kernel               &  2.4.18-14  \\
        ns                   &  ns-2.28  \\
        gnuplot              &  3.8g          \\
        latex uses TeX       &  3.14159       \\
        pdflatex uses pdfTeX &  3.14159-14h   \\
        xgraph               &  12.1 (from ns-allinone-2.28) \\
        acroread             &  4.0     \\
        xdvi                 &  22.15-k \\
      }
    }
  }
  
  puts $latex {
    \hline
    \end{tabular}
    \end{center}
    \end{table}
  
    \begin{figure}
    \begin{center}
    \includegraphics[width=3in]{graph-test-topology}
    \end{center}
    \caption{Graph Test Topology}\label{TopoFigure}
    \end{figure}
  
    The simulation unfolds as shown in Table~\ref{Timeline}.
  
    \begin{table}
    \caption{Timeline for the simulation}\label{Timeline}
    \begin{center}
    \begin{tabular}{|l|p{4.5in}|}
    \hline
    Time &  Description \\
    \hline
    0              &  Simulation begins. \\
    0.5            &  FTP sending from s0 to d0 begins.   \\
    0.8            &  FTP sending from s1 to d1 begins.   \\
    $\approx$ 1.17 &  Full utilization is reached. \\
    $\approx$ 1.45 &  Burst losses occurs due to a buffer overrun. \\
    $\approx$ 3.2  &  After timeout, both flows successfully retransmit. \\
    until 5.0      &  Both flows ramp up, but no further buffer overruns occur
  		    and thus no loss occurs before the simulation ends. \\
    5.0            &  Simulation ends. \\
    \hline
    \end{tabular}
    \end{center}
    \end{table}
  }
}           ;# end of if found latex.

# Outputs latex for a figure containing two graphs placed 
# side-by-side.  The first graph is a graph object
# which is first displayed then placed in latex file.  The comparison
# graph output file is assumed to already exist so we are only 
# interested in the output file's filename.
proc output_graph { new_graph } {
  global latex old_dir env latex_app_path_
  
  if { $latex_app_path_ == ""  } {
    puts "output-graph called, but latex was not found."
    return
  }

  $new_graph display

  set plotter [Graph set plot_device_]

  puts $latex {
    \begin{figure}
    \begin{center}
    \begin{tabular}{cc}
  }

  # obtain the new graph's output filename from the plot device.
  # Remember that only the plot device knows the final filename because
  # it at least appends a file type extension.
  set out_fname [$plotter output-filename $new_graph]
  if { $env(NSVER) == "2.1b5" } {
    set comparison_graph_filename \
      "$old_dir/comparison_graphs_ns2.1b5/[file tail $out_fname]"
  } else {
    if { $env(NSVER) == "2.27" } {
      set comparison_graph_filename \
        "$old_dir/comparison_graphs_ns2.27/[file tail $out_fname]"      
    } else {
      # comparison graphs for ns2.28.
      set comparison_graph_filename \
        "$old_dir/comparison_graphs_ns2.28/[file tail $out_fname]"
    }
  }
  puts $latex "
    \\includegraphics\[width=3in\]{$out_fname} &
    \\includegraphics\[width=3in\]{$comparison_graph_filename}   \\\\
  "
  puts $latex {
    (a) New Graph       &  (b) Comparison Graph \\
    \end{tabular}
  }
 
  #if [catch {
  #  exec diff $output util_graph.eps  
  #  set caption1 "New and comparison plots MATCH." 
  #}] {
  #  set caption1 "New and comparison plots DIFFER!"
  #}
  puts $latex "
    \\caption{[$new_graph set caption_]}
  "
  puts $latex {
    \end{center}
    \end{figure}
  }
}


###############################################
# FINISH
#
# Called at the end of the simulation.
proc finish {} {
  global util_graph util_05_graph latex tmp_directory_
  global seq_graph cwnd0_graph rtt_graph srtt_graph red_graph
  global rttvar_graph rate_bps_graph rate_05_bps_graph
  global rate_pps_graph qlen_pkts_graph qlen_bytes_graph
  global qlen_avg_graph qlen_extrema_graph qdelay_graph
  global flow0_qlen_graph flow1_qlen_graph old_dir cwnd_graph
  global latex_app_path_ xdvi_app_path_
  global xgraph_app_path_ gnuplot_app_path_ latex_app_path_ ghostview_app_path_
  global xdvi_app_path_ pdflatex_app_path_ acroread_app_path_ pdf_app_path_
  global latex_app_ xdvi_app_
  global xgraph_app_ gnuplot_app_ latex_app_ ghostview_app_
  global xdvi_app_ pdflatex_app_ acroread_app_ pdf_app_

  #run-nam

  puts "Simulation finished. Generating plots."

  if { $latex_app_path_ != "" } {
    ###### OUTPUT UTILIZATION GRAPHS
    #puts "Generating utilization versus time graph."
    output_graph $util_graph
   
    output_graph $util_05_graph
  
    #puts "Generating Sequence Number Versus Time graph."
    output_graph $seq_graph
  
    #puts "Generating CWnd versus time graph." 
    output_graph $cwnd_graph
  
    #puts "Generating RTT Versus Time graph."
    output_graph $rtt_graph
  
    #puts "Generaing Smoothed RTT Versus Time graph."
    output_graph $srtt_graph
  
    #puts "Generating graph of average rate over intervals 0f 0.1s \
    #      in bps versus time." 
    output_graph $rate_bps_graph
  
    #puts "Generating graph of average rate over intervals of 0.5s \
    #      in bps versus time."
    output_graph $rate_05_bps_graph 
  
    #puts "Generating graph of averate rate over intervals of 0.1s
    #      in packets per second versus time." 
    output_graph $rate_pps_graph 
   
    #puts "Generating graph of queue length in packets versus time."
    output_graph $qlen_pkts_graph 
  
    #puts "Generating graph of queue length in bytes versus time."
    output_graph $qlen_bytes_graph 
  
    #puts "Generating graph of average queue length versus time."
    output_graph $qlen_avg_graph 
  
    #puts "Generating graph of queue length extrema versus time."
    output_graph $qlen_extrema_graph 
  
    #puts "Generating graph of RED queue length versus time."
    output_graph $red_graph
  
    #puts "Generating graph of queue delay versus time."
    output_graph $qdelay_graph 
  }

  ####### DISPLAY GRAPHS IN XDVI.
  if { $latex_app_path_ != "" && $xdvi_app_path_ != "" } {
    puts "Finishing latex file."
    puts $latex {
        \end{document}
    }
    puts "Closing latex file."
    close $latex
    cd $tmp_directory_
    catch {
      puts "Executing $latex_app_."
      exec latex graph-test-output.tex
    }
    puts "Executing $pdflatex_app_ file again."
    exec latex graph-test-output.tex
  
    puts "Executing $xdvi_app_."
    exec xdvi graph-test-output &
    cd $old_dir
  }

  ###### TEST OTHER PLOT DEVICES
  puts "TESTING PLOT DEVICES."

  if { $xgraph_app_path_ != "" } {
    puts "
Hit return to display utilization versus time using the xgraph plot device,
which executes
  $xgraph_app_path_"

    flush stdout
    gets stdin
    catch {
      set xgraph_plotter [new xgraph]
      $xgraph_plotter plot $util_graph
    }
  }

  if { $ghostview_app_path_ != "" && $gnuplot_app_path_ != "" } {
    puts "
Hit return to display utilization versus time using ghostview plot device 
which executes 
  $ghostview_app_path_
You may have to scroll the window down to see the plot."

    flush stdout
    gets stdin
    catch {
      set gs_plotter [new ghostview]
      $gs_plotter plot $util_graph
    }
  }

  if { $xdvi_app_path_ != "" && $latex_app_path_ != "" && $gnuplot_app_path_ != "" } {
    puts "
Hit return to display utilization versus time and queue length
versus time using the xdvi plot device, which executes 
  $xdvi_app_path_"
    flush stdout
    gets stdin
    set xdvi_plotter [new xdvi]
    $xdvi_plotter plot $util_graph
    $xdvi_plotter plot $qlen_pkts_graph
    $xdvi_plotter close
  }

  if { $pdflatex_app_path_ != "" && $gnuplot_app_path_ != "" && \
       $acroread_app_path_ != "" } {
    puts "
Hit return to display utilization versus time and queue length vs time 
using the acroread plot device, which executes
  $acroread_app_path_
"
    flush stdout
    gets stdin
    set acroread_plotter [new acroread]
    $acroread_plotter plot $util_graph
    $acroread_plotter plot $qlen_pkts_graph
    $acroread_plotter close
  }

  if { $pdf_app_path_ != "" } {
    puts "
Hit return to create a pdf file using pdf plot device and then display it using 
  $acroread_app_path_"
    flush stdout
    gets stdin
    set pdf_plotter [new pdf]
    $pdf_plotter plot-and-wait $util_graph
    catch {
      exec $acroread_app_path_ [$pdf_plotter output-filename $util_graph] &
    }
  }

  set xfig_app_path [find-in-path "xfig"]
  if { $gnuplot_app_path_ != "" && $xfig_app_path != "" } {
    puts "
Hit return to create a fig file version of utilization versus time 
using the fig plot device, and then display it is using 
  $xfig_app_path"
    flush stdout
    gets stdin
    set fig_plotter [new fig]
    $fig_plotter plot $util_graph
    catch {
      exec $xfig_app_path [$fig_plotter output-filename $util_graph] &
    }
  }

  puts "Tests complete."
  exit 0
}


###############################
# MAIN
#

# create a topology containing two sources and two destinations.
set s0 [$ns node]
set d0 [$ns node]
set s1 [$ns node]
set d1 [$ns node]
set n0 [$ns node]
set n1 [$ns node]

# create links.
$ns duplex-link $s0 $n0 10M 20ms DropTail
$ns duplex-link $s1 $n0 10M 20ms DropTail
$ns duplex-link $n0 $n1 1.544M 20ms RED 
$ns duplex-link $n1 $d0 10M 20ms DropTail
$ns duplex-link $n1 $d1 10M 20ms DropTail

set tcp0 [lindex [create-ftp-over-reno $s0 $d0 0.5 0] 0]
set tcp1 [lindex [create-ftp-over-reno $s1 $d1 0.8 1] 0]

set util_graph [new Graph/UtilizationVersusTime $n0 $n1 0.1]
$util_graph set caption_ "Utilization versus time from node n0 to n1.
  This graph should show full utilization at 1.4 seconds. The graph does not 
  display full utilization at 1.1 seconds due to lag introduced by
  averaging over intervals of length 0.1 seconds.  The utilization 
  should drop to zero at around 2 seconds and then return to full 
  utilization around 4 seconds."

set util_05_graph [new Graph/UtilizationVersusTime $n0 $n1 0.5]
$util_05_graph set caption_ "Utilization versus time from node n0 to n1.
   Same as the last graph except the averaging interval was increased from 0.1
   to 0.5 seconds."

set seq_graph [new Graph/Sequence $s0 $n0 1000]
$seq_graph set title_ "TCP 0 vs Time"
$seq_graph set caption_ "Sequence number versus time measured across the 
    link s0 to n0: The sequence numbers
    follow a curve that is roughly linear within each burst (i.e., window)
    with a slight gap in time between bursts until burst loss occurs at 
    around 1.5 seconds. After a burst loss, a timeout occurs and then
    TCP ramps back up."

set cwnd_graph [new Graph/CWndVersusTime $tcp0]
$cwnd_graph set caption_ "CWnd versus time for the FTP sending between s0 and
   d0.  Prior to 0.5 seconds the CWnd is 1 because the FTP transfer does not
   begin until 0.5 seconds into the simulation."

set rtt_graph [new Graph/RTTVersusTime $tcp0]
$rtt_graph set caption_ "RTT versus time for the FTP sending between s0 and d0.
    Prior to 0.5 seconds there are no samples because the FTP transfer
    does not begin until 0.5 seconds into the simulation.  Because the 
    round-trip propagation delay is 120ms, the first RTT sample should arrive
    at s0 at about 0.62 seconds into the simulation, and a new RTT update 
    should occur approximatley every 120ms until almost 1.5 seconds into the 
    simulation. At almost 1.5 seconds, the RTT measurement jumps due to 
    queue at the head of the link from n0 to n1. The RTT samples lag behind 
    the actual queue and the burst losses due to queueing and propagation 
    delays.  No RTT measurements occur during
    the timeout and while packets are being retransmitted.  Thus the next
    RTT sample after the timeout should arrive at the source near the end of 
    the simulation."

set srtt_graph [new Graph/SRTTVersusTime $tcp0]
$srtt_graph set caption_ "Smoothed Round Trip Time (SRTT) versus time for the
    FTP sending between s0 and d0. The SRTT updates at the same time
    as the RTT measurements arrive as shown on the RTT versus time graph.
    The adjustments to SRTT are smaller due to smoothing."

set rttvar_graph [new Graph/RTTVarianceVersusTime $tcp0]
$rttvar_graph set caption_ "RTT variance versus time for the FTP sending
    between s0 and d0:..."

set rate_bps_graph [new Graph/RateVersusTime $n0 $n1]
$rate_bps_graph set caption_ {Rate (in bps) versus time from node n0 to
    node n1 averaged over intervals of length 0.1 seconds.  The rate
    versus time ramps up with TCP, exceeds the bottleneck in the 
    averaging interval [1.1,1.2] which corresponds to the point of
    full utilization shown in the utilization graphs. The rate
    drops to zero in the interval [2.0,2.1] which corresponds to
    the time when the TCP flows stop sending following burst loss
    as shown in the sequence number versus time graph.  Lastly the
    number versus time graphrate versus time ramps up following
    a timeout.}

set rate_05_bps_graph [new Graph/RateVersusTime $n0 $n1 0.5]
$rate_05_bps_graph set caption_ "Rate (in bps) versus time from node n0 to 
    node n1 averaged over intervals of length 0.5 seconds.  This is the
    same as the previous graph except the averaging interval is different."

set rate_pps_graph [new Graph/RateVersusTime $n0 $n1 0.1 false]
$rate_pps_graph set caption_ "Rate (in pps) versus time from node n0 to
    node n1 averaged over intervals of length 0.1 seconds.  This is the 
    same as the previous two graphs except the rate is measured in packets 
    per second."

set qlen_pkts_graph [new Graph/QLenVersusTime $n0 $n1]
$qlen_pkts_graph set caption_ "Instantaneus queue length in packets
    versus time from node n0 to node n1.  Since no connections
    send until 0.5 seconds, the queue length remains zero until 0.5 seconds.
    The queue then performs small oscillations until full utilization 
    is reached at time 1.17 seconds. After 1.17 seconds, the instantaneous
    queue length climbs until loss occurs at 1.45 seconds.  Following
    the burst loss, the queue drains." 

set qlen_bytes_graph [new Graph/QLenVersusTime $n0 $n1 -1 false]
$qlen_bytes_graph set caption_ "This graph of queue length versus time
    is the same as the previous graph except the queue length is 
    measured in bytes."

set qlen_avg_graph [new Graph/QLenVersusTime $n0 $n1 0.05 true false]
$qlen_avg_graph set caption_ "This graph of queue length 
    versus time is the same as the previous two plots except the queue
    length is averaged over 0.05 second
    intervals.  By averaging queue length we reduce the size of
    the output queue length trace file and speed up the simulation by 
    reducing the amount of file I/O.  The speed-up can be significant
    especially in higher bit rate simulations."

set qlen_extrema_graph [new Graph/QLenVersusTime $n0 $n1 0.05 true true] 
$qlen_extrema_graph set caption_ "This graph of queue length 
    versus time is the same as the previous three plots except the 
    min and max of each interval are output to the trace file and the 
    queue length is measured in packets.  Averaging tends to smooth
    out queueing, plotting extrema does not.  With sufficiently
    small intervals, plotting the extrema sometimes appears  
    indistinguishable from plotting instantaneous queue length, however 
    plotting only the extrema achieves smaller queue length trace files 
    and faster simulations."

set qdelay_graph [new Graph/QDelayVersusTime $n0 $n1 0.05]
$qdelay_graph set caption_ "Graph of queue delay versus time follows the
    same shape as the queue length graphs."

set p2p_delay_graph [new Graph/PointToPointDelayVersusTime $s0 $n0 \
                                                  $n1 $d0 0.05]
$p2p_delay_graph set caption_ "Point-to-point delay versus time
    follows the same shape as the queue delay graph except that it
    includes an offset corresponding to the propagation delay
    in the links (s0,n0), (n0,n1), and (n1,d0)."

#HERE
#set flow0_qlen_graph [new Graph/FlowQLenVersusTime $n0 $n1 0]
#$flow0_qlen_graph set caption_ "Graph of the contribution of the ftp transfer
#    from s0 to d0 to the queue length at the head of the link from n0 to n1
#    versus time. It has the same basic shape as the queue length versus 
#    time graphs except that the ftp transfer occupies only a fraction
#    of the queue."
#
#HERE
#set flow1_qlen_graph [new Graph/FlowQLenVersusTime $n0 $n1 1]
#$flow1_qlen_graph set caption_ "Graph of the contribution of the ftp transfer
#    from s1 to d1 to the queue length at the head of the link 
#    from n0 to n1 versus time.  This has the same shape as the
#    previous graph except that the transfer from s1 to d1 occupies
#    less of the queue because it starts at a later time."
#
#set flow1_avg_qlen_graph [new Graph/FlowQLenVersusTime $n0 $n1 1 0.05 false]
#$flow1_avg_qlen_graph set caption_ "Graph of the contribution in bytes
#    of the ftp transfer from s1 to d1 averaged over 0.05 second intervals." 

# HERE
#  REDQueueVersusTime     avg queue, instant queue versus time
set red_graph [new Graph/REDQueueVersusTime $n0 $n1]
$red_graph set caption_ "Graph of RED's average and instantaneous queue length versus time."

$ns color 0 Blue
$ns color 1 Red

# arrange links for nam
$ns duplex-link-op $n0 $n1 queuePos 0.5
$ns duplex-link-op $s0 $n0 orient 1.75
$ns duplex-link-op $s1 $n0 orient 0.25
$ns duplex-link-op $n0 $n1 orient right
$ns duplex-link-op $n1 $d0 orient 0.25
$ns duplex-link-op $n1 $d1 orient 1.75


$ns at 5 finish
$ns run



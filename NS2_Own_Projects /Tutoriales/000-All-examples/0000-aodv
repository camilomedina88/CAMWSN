000-aodv:2gaf.tcl:set val(rp) AODV ;# routing protocol
000-aodv:aodv-10.tcl:set val(rp) AODV ;
000-aodv:aodv-30.tcl:set val(rp) AODV ;
000-aodv:aodv-40.tcl:set val(rp) AODV ;
000-aodv:aodv-50.tcl:set val(rp) AODV ;
000-aodv:aodv-5.tcl:set val(rp) AODV ;
000-aodv:aodv-ankita.tcl:set val(rp) AODV ;# routing protocol
000-aodv:Aodv-sample.tcl:set val(rp) AODV
000-aodv:aodv-wujingbang.tcl:set val(rp) AODV
000-aodv:atk3.tcl:set val(rp) AODV ;
000-aodv:bhAODV.tcl:set val(rp) AODV ;# routing protocol
000-aodv:box-Helen.tcl:set val(rp) AODV
000-aodv:Dir-antenna-test.tcl:set val(rp) AODV ;# routing protocol
000-aodv:gaf.tcl:set val(rp) AODV ;# routing protocol
000-aodv:harshav.tcl:set val(rp) AODV ;#Routing Protocol
000-aodv:IDStest06_dos.tcl:set val(rp) AODV                                ;# AODV routing protocol
000-aodv:IDStest06_dos.tcl:set val(rp) AODV                             ;# AODV routing protocol
000-aodv:IDStest06_dos_uu.tcl:set val(rp) AODVUU                                ;# AODV routing protocol
000-aodv:IDStest06_dos_uu.tcl:set val(rp) AODVUU                             ;# AODV routing protocol
000-aodv:IDStest06_sybil.tcl:set val(rp) AODVUU                                ;# AODV routing protocol
000-aodv:IDStest06_sybil.tcl:set val(rp) AODVUU                             ;# AODV routing protocol
000-aodv:IDStest06_wormhole.tcl:set val(rp) AODV                                ;# AODV routing protocol
000-aodv:IDStest06_wormhole.tcl:set val(rp) AODV                             ;# AODV routing protocol
000-aodv:IDStest06_wormhole_uu.tcl:set val(rp) AODVUU                                ;# AODV routing protocol
000-aodv:IDStest06_wormhole_uu.tcl:set val(rp) AODVUU                             ;# AODV routing protocol
000-aodv:IDS_trafficmodel.tcl:set val(rp) AODVUU                                ;# AODV routing protocol
000-aodv:joseph4-13.tcl:set val(rp) AODV ;# routing protocol 
000-aodv:joseph4.tcl:set val(rp) AODV ;# routing protocol 
000-aodv:maodv_apar2610.tcl:set val(rp) AODV ;# routing protocol
000-aodv:mimo.tcl:set val(rp) AODV ;# routing protocol
000-aodv:ns2.tcl:set val(rp) AODV ;# routing protocol
000-aodv:orig-maodv_apar2610.tcl:set val(rp) AODV ;# routing protocol
000-aodv:phenom05.tcl:set val(rp) AODVUU                                ;# AODV routing protocol
000-aodv:phenom06.tcl:set val(rp) AODV                                ;# AODV routing protocol
000-aodv:phenom06.tcl:set val(rp) AODV                             ;# AODV routing protocol
000-aodv:phenom07.tcl:set val(rp) AODV                                ;# AODV routing protocol
000-aodv:phenom09.tcl:set val(rp) AODV
000-aodv:phenom12.tcl:set val(rp) AODV
000-aodv:Sample-TeNs.tcl:set val(rp) AODV ;# routing protocol
000-aodv:wireless-aodv-malicious.tcl:set val(rp) AODV ;# routing protocol
000-aodv:wrls0.tcl:set val(rp) AODV ;# routing protocol
0-test4maccon.tcl:set val(rp)        AODV     ;#Routing Protocol
10nodes_1.tcl:set val(adhocRouting2)  blackholeAODV
10nodes_1.tcl:#set val(adhocRouting3)  grayholeAODV
10nodes_1.tcl:#set val(adhocRouting4)   secAODV
10nodes_1.tcl:#$ns_ node-config -adhocRouting grayholeAODV
10nodes_1.tcl:#$ns_ node-config -adhocRouting grayholeAODV
11b-ibss-long_pre.tcl:#set val(rp)             AODV                       ;# routing protocol
11b-ibss-short_pre.tcl:#set val(rp)             AODV                       ;# routing protocol
11mac_comp.tcl:set val(rp)             AODV                       ;# routing protocol
1-DSDV-adhoc.tcl:###      Performance Evaluation of DSDV, AODV, and DSR
1-DSDV-adhoc.tcl:#########        $ ns AODV-DSR-DSDV-performance.tcl DSDV cbr-50-10-8 scene-50-0-20
1.tcl:set val(rp)             AODV                       ;# routing protocol
1-test4macng.tcl:set val(rp)        AODV     ;#Routing Protocol
2-AODV-adhoc.tcl:###      Performance Evaluation of DSDV, AODV, and DSR
2-AODV-adhoc.tcl:#########        $ ns AODV-DSR-DSDV-performance.tcl DSDV cbr-50-10-8 scene-50-0-20
2-AODV-adhoc.tcl:        puts "Example:ns adhoc.tcl AODV cbr-50-10-8 scene-50-0-20"
2dccp_lwx-LTE__nassou19891.tcl:set opt(rp)          DSDV                       ;# routing protocol. DSDV, DSR, AODV.
2gaf.tcl:set val(rp) AODV ;# routing protocol
2motion-Aodv-50-nodes.tcl:set val(adhocRouting)   AODV
2paires.tcl:set val(rp)                     AODV
2sco_inq.tcl:    $node($i) rt AODV
2.tcl:set val(rp)             AODV ;# routing protocol
2-test4macng-random-topo-2channels.tcl:set val(rp)        AODV     ;#Routing Protocol
2wireless-demo-csci694_aodv-uu.tcl:# Define options : Line 53 (DSDV) was edited to AODVUU, ref. @khinmyo, http://www.linuxquestions.org/questions/showthread.php?p=4886074#post4886074
2wireless-demo-csci694_aodv-uu.tcl:set opt(adhocRouting)   AODVUU	      ;# aodv-uu
2x-DMOCA-code_v1.tcl:                -adhocRouting  AODV \
3-DSR-adhoc.tcl:###      Performance Evaluation of DSDV, AODV, and DSR
3-DSR-adhoc.tcl:#########        $ ns AODV-DSR-DSDV-performance.tcl DSDV cbr-50-10-8 scene-50-0-20
3-test4macng-random-topo-5channels.tcl:set val(rp)        AODV     ;#Routing Protocol
4node.tcl: set val(rp)	       AODV                    ;# routing protocol
6-MRMAC.tcl:set val(rp)        AODV     ;#Routing Protocol
abe-aodv.tcl:set opt(ragent)         Agent/rtProto/AODV
abe-aodv.tcl:        puts "*** WARNING: AODV using $opt(pos) position configuration..."
abe-aodv.tcl:Agent/rtProto/AODV instproc init args {
abe-aodv.tcl:Agent/rtProto/AODV set sport_   0
abe-aodv.tcl:Agent/rtProto/AODV set dport_   0
add__ns-lib.tcl:blackholeAODV {
add__ns-lib.tcl:set ragent [new Agent/blackholeAODV [$node no
adhoc.tcl:        puts "Example:ns adhoc.tcl AODV cbr-50-10-8 scene-50-0-20 50" 
afr-david.tcl:remove-packet-header AODV ARP IMEP IPinIP IVS LDP MPLS MIP Ping PGM PGM_SPM PGM_NAK NV Smac Pushback TORA TFRC_ACK TFRC 
aleatoire.tcl:set val(rp)                     AODV
ampMeasures1.tcl:		$node_($i) rt AODV
ampMeasures2.tcl:		$node_($i) rt AODV
ampMeasuresFinal3.tcl:		$node_($i) rt AODV
ampMeasuresFinal4.tcl:		$node_($i) rt AODV
ampMeasuresFinal5.tcl:		$node_($i) rt AODV
ampMeasuresFinal6.tcl:		$node_($i) rt AODV
ampMeasures.tcl:		$node_($i) rt AODV
amp-sample.tcl:                $node_($i) rt AODV
amp-sample.tcl:        $ns_ at [expr (($i/10+0.2)+1+($i*2/10))] "$app($i) start"                 ;# Start transmission AODV get route
amp-sample.tcl:        $ns_ at [expr (($i/10+0.2)+2+($i*2/10))] "$app($i) stop"                 ;# Stop transmission AODV get route
ansarsatti.tcl:#remove-packet-header AODV ARP IMEP IPinIP IVS LDP MPLS MIP Ping PGM PGM_SPM PGM_NAK NV Smac Pushback TORA TFRC_ACK TFRC ;# original
anycast.tcl:    puts {pent: Usage> ns pent.tcl [manet <DSR,AODV,TORA,OLSR> }
aodv10ms.tcl:set val(rp)             AODV                       ;# routing protocol
aodv10nodes.tcl:set val(rp)             AODV                       ;# routing protocol
aodv-10.tcl:set val(rp) AODV ;
aodv-10.tcl:set tracefd [open AODV_10.tr w]
aodv18.tcl:# A 100-node example for ad-hoc simulation with AODV
aodv18.tcl:set val(rp)             AODV                       ;# routing protocol
aodv18.tcl:set tracefd       [open testAODV.tr w]
aodv18.tcl:set namtrace      [open testAODV.nam w]
aodv-20.tcl:set tracefd [open AODV_20.tr w]
aodv-30.tcl:set val(rp) AODV ;
aodv-30.tcl:set tracefd [open AODV_30.tr w]
aodv-40.tcl:set val(rp) AODV ;
aodv-40.tcl:set tracefd [open AODV_40.tr w]
aodv_50node-nabble.tcl:#    http://network-simulator-ns-2.7690.n7.nabble.com/Urgent-Help-Needed-with-running-AODV-on-NS-2-34-td10367.html
aodv_50node-nabble.tcl:set val(rp)             AODV                       ;# routing protocol
Aodv-50-nodes.tcl:set val(adhocRouting)   AODV
aodv-50.tcl:set val(rp) AODV ;
aodv-50.tcl:set tracefd [open AODV_50.tr w]
aodv-5.tcl:set val(rp) AODV ;
aodv-5.tcl:set tracefd [open AODV_5.tr w]
aodv_802_15_4.tcl:set val(rp)            AODV			    ;# protocol tye
aodv-ankita.tcl:set val(rp) AODV ;# routing protocol
aodv-AshishPrasad.tcl:set opt(adhocRouting) AODV
aodv-AshishPrasad.tcl:#set opt(rpr) 1 ;#1 for DSR and anything else for AODV
aodv-AshishPrasad.tcl:# set opt(adhocRouting) AODV
aodv-BerlinRoofNet.tcl:set opt(ragent)		Agent/rtProto/AODV
aodv-BerlinRoofNet.tcl:	puts "*** WARNING: AODV using $opt(pos) position configuration..."
aodv-BerlinRoofNet.tcl:Agent/rtProto/AODV instproc init args {
aodv-BerlinRoofNet.tcl:Agent/rtProto/AODV set sport_	0
aodv-BerlinRoofNet.tcl:Agent/rtProto/AODV set dport_	0
aodv-crhc.tcl:set opt(adhocRouting)   AODV
aodv-crhc.tcl:#set opt(rpr)	1	;#1 for DSR and anything else for AODV
aodv-crhc.tcl:#	set opt(adhocRouting)   AODV
aodv-defaults.tcl:# helloInterval_ standard ns AODV value (sec)
aodv-defaults.tcl:Routing/AODV set helloInterval_ 1.0
aodv-defaults.tcl:# minHelloIntervalRatio_ standard ns AODV value (minHelloInterval = helloInterval_ * minHelloIntervalRatio_)
aodv-defaults.tcl:Routing/AODV set minHelloIntervalRatio_ 0.75
aodv-defaults.tcl:# maxHelloIntervalRatio_ standard ns AODV value (maxHelloInterval = helloInterval_ * maxHelloIntervalRatio_)
aodv-defaults.tcl:Routing/AODV set maxHelloIntervalRatio_ 1.25
aodv-defaults.tcl:# overheadLength_ standard ns AODV value (IP header length)
aodv-defaults.tcl:Routing/AODV set overheadLength_ 20
aodv-defaults.tcl:# standard ns AODV value
aodv-defaults.tcl:Routing/AODV set routeCacheFrequency_ 0.5
aodv-defaults.tcl:Routing/AODV set debug_ 0
aodv-defaults.tcl:# RREQ_GRAT_RREP standard ns AODV value
aodv-defaults.tcl:Routing/AODV set RREQ_GRAT_RREP        0x80
AODV-DSR-DSDV-performance.tcl:###      Performance Evaluation of DSDV, AODV, and DSR
AODV-DSR-DSDV-performance.tcl:#########        $ ns AODV-DSR-DSDV-performance.tcl DSDV cbr-50-10-8 scene-50-0-20
Aodv-enggedu-33.tcl:#       http://enggedu.com/ns2_simulator/ns2_wireless_network/Tcl_script_to_make_communication_between_nodes_using_AODV_routing_protocol_and_CBR_traffic/index.php
Aodv-enggedu-33.tcl:# Tcl script to make communication between nodes using AODV routing protocol and CBR traffic 
Aodv-enggedu-33.tcl:#     Number of nodes (22) is fixed in the program. Nodes are configured with specific parameters of a mobile wireless node. After creating the nam file and trace file, we set up topography object. set node_ ($i) [$ns node] is used to create the nodes. Initial location of the nodes is fixed. Specific X, Y coordinates are assigned to every node. Nodes are given mobility with fixed speed and fixed destination location. Here we set the initial size for the every node by using initial_node_pos. AODV routing protocol is used here. $val(stop) specifies the end time of the simulation. UDP agent is attached to sender node. LossMonitor agent is attached to receiver node. Both the agents are connected and CBR traffic is attached to UDP agent. Now communication set up for nodes are established.
Aodv-enggedu-33.tcl:set val(rp)	       AODV
Aodv-enggedu-53.tcl:#       http://enggedu.com/ns2_simulator/ns2_wireless_network/Tcl_script_to_make_communication_between_nodes_using_AODV_routing_protocol_and_CBR_traffic/index.php
Aodv-enggedu-53.tcl:# Tcl script to make communication between nodes using AODV routing protocol and CBR traffic 
Aodv-enggedu-53.tcl:#     Number of nodes (22) is fixed in the program. Nodes are configured with specific parameters of a mobile wireless node. After creating the nam file and trace file, we set up topography object. set node_ ($i) [$ns node] is used to create the nodes. Initial location of the nodes is fixed. Specific X, Y coordinates are assigned to every node. Nodes are given mobility with fixed speed and fixed destination location. Here we set the initial size for the every node by using initial_node_pos. AODV routing protocol is used here. $val(stop) specifies the end time of the simulation. UDP agent is attached to sender node. LossMonitor agent is attached to receiver node. Both the agents are connected and CBR traffic is attached to UDP agent. Now communication set up for nodes are established.
Aodv-enggedu-53.tcl:set val(rp)	       AODV
Aodv-enggedu.tcl:#       http://enggedu.com/ns2_simulator/ns2_wireless_network/Tcl_script_to_make_communication_between_nodes_using_AODV_routing_protocol_and_CBR_traffic/index.php
Aodv-enggedu.tcl:# Tcl script to make communication between nodes using AODV routing protocol and CBR traffic 
Aodv-enggedu.tcl:#     Number of nodes (22) is fixed in the program. Nodes are configured with specific parameters of a mobile wireless node. After creating the nam file and trace file, we set up topography object. set node_ ($i) [$ns node] is used to create the nodes. Initial location of the nodes is fixed. Specific X, Y coordinates are assigned to every node. Nodes are given mobility with fixed speed and fixed destination location. Here we set the initial size for the every node by using initial_node_pos. AODV routing protocol is used here. $val(stop) specifies the end time of the simulation. UDP agent is attached to sender node. LossMonitor agent is attached to receiver node. Both the agents are connected and CBR traffic is attached to UDP agent. Now communication set up for nodes are established.
Aodv-enggedu.tcl:set val(rp)	       AODV
AODV_error.tcl:# I found that the behavior with AODV or AODV-UU with both ns2.1b9a and 
AODV_error.tcl:set val(rp)   AODVUU  ;#one of AODV, AODVUU, DSR, TORA, OLSR(v7)
aodv-ipsit.tcl: set val(rp)	       AODV                     ;# routing protocol
aodv-manet.tcl:set val(nnaodv)         20                                       ;# number of AODV mobilenodes
aodv-manet.tcl:set val(rp)             AODV                                     ;# routing protocol
aodv-manet.tcl:#set val(cp)             "scenarios/scen1forAODV-n20-t500-x750-y750"          ;#Connection Pattern
aodv-manet.tcl:set tracefd       [open AODV.tr w]
aodv-manet.tcl:set namtrace            [open AODV.nam w]
aodv-manet.tcl:# Creating mobile AODV nodes for simulation
aodv-manet.tcl:#$ns_ node-config        -adhocRouting blackholeAODV
aodv-manet.tcl:# ./setdest -n 20 -p 1.0 -M 20.0 -t 500 -x 750 -y 750 > scen1forAODV-n20-t500-x750-y750
aodv-m.tcl: set val(rp)	       AODV                     ;# routing protocol
aodv-multiroute.tcl:set opt(ragent)		Agent/rtProto/AODV
aodv-multiroute.tcl:	puts "*** WARNING: AODV using $opt(pos) position configuration..."
aodv-multiroute.tcl:Agent/rtProto/AODV instproc init args {
aodv-multiroute.tcl:Agent/rtProto/AODV set sport_	0
aodv-multiroute.tcl:Agent/rtProto/AODV set dport_	0
aodv-proc.tcl:PacketHeaderManager set tab_(PacketHeader/MRCL_AODV) 1
aodv-rah12345.tcl: set val(rp)	       AODV                     ;# routing protocol
aodv-routing.table.tcl:set val(rp)     AODV                       ;# routing protocol
Aodv-sample.tcl:set val(rp) AODV
aodv_script.tcl:set opt(ifq)		Queue/DropTail/PriQueue	;# for AODV/DSDV
aodv_script.tcl:set opt(rp)             AODV	;# routing protocol script (dsr or aodv)
aodv-Soumia.tcl:set val(rp)             AODV                       ;# routing protocol
aodv.tcl:set opt(ragent)		Agent/rtProto/AODV
aodv.tcl:	puts "*** WARNING: AODV using $opt(pos) position configuration..."
aodv.tcl:Agent/rtProto/AODV instproc init args {
aodv.tcl:Agent/rtProto/AODV set sport_	0
aodv.tcl:Agent/rtProto/AODV set dport_	0
AODV-testcode-rand__cat-n.tcl:     1	#     https://code.google.com/p/ns2-gators/wiki/AODVtestcode
AODV-testcode-rand__cat-n.tcl:     4	# A 100-node example for ad-hoc simulation with AODV
AODV-testcode-rand__cat-n.tcl:    23	set tracefd       [open testAODV.tr w]
AODV-testcode-rand__cat-n.tcl:    25	set namtrace      [open testAODV.nam w]
AODV-testcode-rand.tcl:#     https://code.google.com/p/ns2-gators/wiki/AODVtestcode
AODV-testcode-rand.tcl:# A 100-node example for ad-hoc simulation with AODV
AODV-testcode-rand.tcl:set tracefd       [open testAODV.tr w]
AODV-testcode-rand.tcl:set namtrace      [open testAODV.nam w]
AODV-UI-1.tcl:# TCL AODV DESIGN
AODV-UI-1.tcl:set val(adhocRP) AODV;                       #routing protocol
AODV-UI-1.tcl:#Agent AODV as gateway. 2=reactive 1=hybrid 0=proactive
AODV-UI-1.tcl:Agent/AODV set gw_discovery 2
AODV-UI.tcl:# TCL AODV DESIGN
AODV-UI.tcl:set val(adhocRP) AODV;                       #routing protocol
AODV-UI.tcl:#Agent AODV as gateway. 2=reactive 1=hybrid 0=proactive
AODV-UI.tcl:Agent/AODV set gw_discovery 2
aodv-uu-ad-hoc-hybrid-network__EDIT__.tcl:# AODV DESIGN
aodv-uu-ad-hoc-hybrid-network__EDIT__.tcl:set val(adhocRP) AODVUU ;                       #routing protocol in used
aodv-uu-ad-hoc-hybrid-network__EDIT__.tcl:#Agent AODV as gateway. 2=reactive 1=hybrid 0=proactive
aodv-uu-ad-hoc-hybrid-network__EDIT__.tcl:#Agent/AODVUU set gw_discovery 2
aodv-uu-ad-hoc-hybrid-network__EDIT__.tcl:#Agent/AODVUU set internet_gw_mode_ 1
aodv-uu-ad-hoc-hybrid-network__EDIT__.tcl:#gateway AODV-UU
aodv-uu-ad-hoc-hybrid-network__EDIT__.tcl:#gateway AODV-UU
aodv-uu-ad-hoc-hybrid-network__EDIT__.tcl:$ns node-config -adhocRouting AODVUU
aodv-uu-ad-hoc-hybrid-network__EDIT__.tcl:#for AODV-UU
aodv-uu-ad-hoc-hybrid-network__EDIT__.tcl:#for AODV-UU
aodv-uu-ad-hoc-hybrid-network.tcl:# AODV DESIGN
aodv-uu-ad-hoc-hybrid-network.tcl:set val(adhocRP) AODVUU ;                       #routing protocol in used
aodv-uu-ad-hoc-hybrid-network.tcl:#Agent AODV as gateway. 2=reactive 1=hybrid 0=proactive
aodv-uu-ad-hoc-hybrid-network.tcl:#Agent/AODVUU set gw_discovery 2
aodv-uu-ad-hoc-hybrid-network.tcl:#Agent/AODVUU set internet_gw_mode_ 1
aodv-uu-ad-hoc-hybrid-network.tcl:#gateway AODV-UU
aodv-uu-ad-hoc-hybrid-network.tcl:#gateway AODV-UU
aodv-uu-ad-hoc-hybrid-network.tcl:$ns node-config -adhocRouting AODVUU
aodv-uu-ad-hoc-hybrid-network.tcl:#for AODV-UU
aodv-uu-ad-hoc-hybrid-network.tcl:#for AODV-UU
AODV-UU_adhoc.tcl:# Here is my TCL script to running AODV-UU in ad hoc hybrid network scenario using NS-2.34 and AODV-UU-0.9.6. 
AODV-UU_adhoc.tcl:# AODV DESIGN
AODV-UU_adhoc.tcl:set val(adhocRP) AODVUU;                       #routing protocol in used
AODV-UU_adhoc.tcl:#Agent AODV as gateway. 2=reactive 1=hybrid 0=proactive
AODV-UU_adhoc.tcl:#Agent/AODVUU set gw_discovery 2
AODV-UU_adhoc.tcl:#Agent/AODVUU set internet_gw_mode_ 1
AODV-UU_adhoc.tcl:#gateway AODV-UU
AODV-UU_adhoc.tcl:#gateway AODV-UU
AODV-UU_adhoc.tcl:$ns node-config -adhocRouting AODVUU
AODV-UU_adhoc.tcl:#for AODV-UU
AODV-UU_adhoc.tcl:#for AODV-UU
aodv-uu_cbr_gateway.tcl:Module/AODVUU set llfeedback_ 1
aodv-uu_cbr_gateway.tcl:Module/AODVUU set debug_ 0
aodv-uu_cbr_gateway.tcl:set node0_aodvuu    [new Module/AODVUU]
aodv-uu_cbr_gateway.tcl:set node0_ipif      [new Module/IP/AODVInterface]
aodv-uu_cbr_gateway.tcl:$node0 addModule 4 $node0_aodvuu    3 "n0_AODV"
aodv-uu_cbr_gateway.tcl:set node1_aodvuu    [new Module/AODVUU]
aodv-uu_cbr_gateway.tcl:set node1_ipif0     [new Module/IP/AODVInterface]
aodv-uu_cbr_gateway.tcl:$node1 addModule 4 $node1_aodvuu    3 "n1_AODV"
aodv-uu_cbr_gateway.tcl:set node1_ipif1     [new Module/IP/AODVInterface]
aodv-uu_cbr_gateway.tcl:set node2_aodvuu    [new Module/AODVUU]
aodv-uu_cbr_gateway.tcl:set node2_ipif0     [new Module/IP/AODVInterface]
aodv-uu_cbr_gateway.tcl:$node2 addModule 4 $node2_aodvuu    3 "n2_AODV"
aodv-uu_cbr_gateway.tcl:set node2_ipif1     [new Module/IP/AODVInterface]
aodv-uu_cbr_gateway.tcl:set node3_aodvuu    [new Module/AODVUU]
aodv-uu_cbr_gateway.tcl:set node3_ipif0     [new Module/IP/AODVInterface]
aodv-uu_cbr_gateway.tcl:$node3 addModule 4 $node3_aodvuu    3 "n3_AODV"
aodv-uu_cbr_gateway.tcl:set node3_ipif1     [new Module/IP/AODVInterface]
aodvuu-default.tcl:PacketHeaderManager set tab_(PacketHeader/AODVUU)     1
aodvuu-default.tcl:Module/AODVUU set unidir_hack_ 0
aodvuu-default.tcl:Module/AODVUU set rreq_gratuitous_ 0
aodvuu-default.tcl:Module/AODVUU set expanding_ring_search_ 1
aodvuu-default.tcl:Module/AODVUU set local_repair_ 0
aodvuu-default.tcl:Module/AODVUU set receive_n_hellos_ 0
aodvuu-default.tcl:Module/AODVUU set hello_jittering_ 0
aodvuu-default.tcl:Module/AODVUU set wait_on_reboot_ 0
aodvuu-default.tcl:Module/AODVUU set debug_ 0
aodvuu-default.tcl:Module/AODVUU set rt_log_interval_ 0
aodvuu-default.tcl:Module/AODVUU set log_to_file_ 0
aodvuu-default.tcl:Module/AODVUU set optimized_hellos_ 0
aodvuu-default.tcl:Module/AODVUU set ratelimit_ 1
aodvuu-default.tcl:Module/AODVUU set llfeedback_ 1
aodvuu-default.tcl:Module/AODVUU set internet_gw_mode_ 0
aodv-uu_mesh_plus_wired.tcl:# AODV-UU
aodv-uu_mesh_plus_wired.tcl:Module/AODVUU set llfeedback_ 1
aodv-uu_mesh_plus_wired.tcl:Module/AODVUU set debug_ 0
aodv-uu_mesh_plus_wired.tcl:	set wlAodvs($n)		[new Module/AODVUU]
aodv-uu_mesh_plus_wired.tcl:	set wlIpIfs($n)		[new Module/IP/AODVInterface]
aodv-uu_mesh_plus_wired.tcl:	$wlNodes($n) addModule 4 $wlAodvs($n) 0 "wlAODV${n}"
aodv-uu_mesh_plus_wired.tcl:	set apAodvs($n)		[new Module/AODVUU]
aodv-uu_mesh_plus_wired.tcl:	$apNodes($n)		addModule 4 $apAodvs($n)  0 "apAODV${n}"
aodv-uu_mesh_plus_wired.tcl:	set apIpIfs($n,0)	[new Module/IP/AODVInterface]
aodv-uu_mesh_plus_wired.tcl:	set apIpIfs($n,1)	[new Module/IP/AODVInterface]
aodv-uu_mesh_plus_wired.tcl:	set apIpIfs($apNodeIndex,$apIpIfCounter($apNodeIndex))		[new Module/IP/AODVInterface]
aodv-uu-pong.tcl:Module/AODVUU set llfeedback_ 1
aodv-uu-pong.tcl:Module/AODVUU set debug_ 10
aodv-uu-pong.tcl:set AODVUU1 [new Module/AODVUU]
aodv-uu-pong.tcl:set IPIF1 [new Module/IP/AODVInterface]
aodv-uu-pong.tcl:$node1 addModule 4 $AODVUU1 3 "AODV"
aodv-uu-pong.tcl:$node1 setConnection $pong1 $AODVUU1 1
aodv-uu-pong.tcl:$node1 setConnection $AODVUU1 $IPIF1 1
aodv-uu-pong.tcl:$AODVUU1 add-if $IPIF1
aodv-uu-pong.tcl:$AODVUU1 if-queue [$LL1 getQueue]
aodv-uu-pong.tcl:set AODVUU2 [new Module/AODVUU]
aodv-uu-pong.tcl:set IPIF2 [new Module/IP/AODVInterface]
aodv-uu-pong.tcl:$node2 addModule 4 $AODVUU2 3 "AODV"
aodv-uu-pong.tcl:$node2 setConnection $pong2 $AODVUU2 1
aodv-uu-pong.tcl:$node2 setConnection $AODVUU2 $IPIF2 1
aodv-uu-pong.tcl:$AODVUU2 add-if $IPIF2
aodv-uu-pong.tcl:$AODVUU2 if-queue [$LL2 getQueue]
aodv-uu-pong.tcl:set AODVUU3 [new Module/AODVUU]
aodv-uu-pong.tcl:set IPIF3 [new Module/IP/AODVInterface]
aodv-uu-pong.tcl:$node3 addModule 4 $AODVUU3 3 "AODV"
aodv-uu-pong.tcl:$node3 setConnection $pong3 $AODVUU3 1
aodv-uu-pong.tcl:$node3 setConnection $AODVUU3 $IPIF3 1
aodv-uu-pong.tcl:$AODVUU3 add-if $IPIF3
aodv-uu-pong.tcl:$AODVUU3 if-queue [$LL3 getQueue]
aodv-uu-pong.tcl:$ns at 0 "$AODVUU1 start"
aodv-uu-pong.tcl:$ns at 0 "$AODVUU2 start"
aodv-uu-pong.tcl:$ns at 0 "$AODVUU3 start"
aodvuu-Syarif.tcl:# AODV DESIGN
aodvuu-Syarif.tcl:set val(adhocRP) AODVUU;                       #routing protocol in used
aodvuu-Syarif.tcl:#Agent AODV as gateway. 2=reactive 1=hybrid 0=proactive
aodvuu-Syarif.tcl:#Agent/AODVUU set gw_discovery 2
aodvuu-Syarif.tcl:#Agent/AODVUU set internet_gw_mode_ 1
aodvuu-Syarif.tcl:#gateway AODV-UU
aodvuu-Syarif.tcl:#gateway AODV-UU
aodvuu-Syarif.tcl:$ns node-config -adhocRouting AODVUU
aodvuu-Syarif.tcl:#for AODV-UU
aodvuu-Syarif.tcl:#for AODV-UU
aodv_uu_unreachable.tcl:# https://github.com/patsgit/Click-AODV/blob/master/aodvscripts/aodv_uu_unreachable.tcl
aodv_uu_unreachable.tcl:# AODV trace support
aodv_uu_unreachable.tcl:# Tell the simulator to create AODVUU nodes.
aodv_uu_unreachable.tcl: $ns_ node-config -adhocRouting AODVUU \
aodv_uu_unreachable.tcl:#AODV-UU configuration to confirm to situation possible in nsclick
aodv-vbr68.tcl:set opt(rp)	AODV 		;# routing protocol script
aodv-vbr68.tcl:set opt(agent)	AODV
aodv-wujingbang.tcl:set val(rp) AODV
aodv-wujingbang.tcl:puts "Simulation of a simple wireless topology running with AODV\n"
aodv-Xgr_blackhole.tcl:######### Added for blackholeAODV
aodv-Xgr_blackhole.tcl:set val(brp)     blackholeAODV
aodv-Xgr_blackhole.tcl:$ns node-config -adhocRouting AODV
aodv-Xgr_blackhole.tcl:###################################### Added for blackholeAODV
aodv-X.tcl:$ns node-config -adhocRouting AODV
aomdv-MarcoFiore.tcl:#add-packet-header IP LL Mac AODV AOMDV ATR DSDV DSR OLSR UDP TCP CBR FTP      ;# needed headers
aomdv-Nindu.tcl:#add-packet-header IP LL Mac AODV AOMDV ATR DSDV DSR OLSR UDP TCP CBR FTP      ;# needed headers
aomdv-Pareto.tcl:#add-packet-header IP LL Mac AODV AOMDV ATR DSDV DSR OLSR UDP TCP CBR FTP      ;# needed headers
aomdv.tcl:#add-packet-header IP LL Mac AODV AOMDV ATR DSDV DSR OLSR UDP TCP CBR FTP      ;# needed headers
ARP_TCP-box.tcl:set val(rp)         AODV
ARP_TCP-box.tcl:add-packet-header AODV 
article2-20noeuds.tcl:set val(rp)     OAODV                       ;# routing protocol
article2-20noeuds.tcl:set namtrace [open AODV10.nam w]
article2-20noeuds.tcl:      # exec xgraph throughput1.tr throughput2.tr throughput3.tr -geometry 800x400 -t "AODV Throughput" -x "Time" -y "No.of Packets" -bg white &
article2-20noeuds.tcl:      # exec ./xgraph packetdrop1.tr packetdrop2.tr packetdrop3.tr -geometry 800x400 -t "AODV Packet Drop" -x "Time" -y "No.of Packets" -bg white &
article2-20noeuds.tcl:      # exec ./xgraph delay1.tr delay2.tr delay3.tr -geometry 800x400 -t "AODV Delay Level" -x "Time" -y "No.of Packets" -bg white &
article2-20noeuds.tcl:      # exec ./nam AODV10.nam &
atk3.tcl:set val(rp) AODV ;
atk3.tcl:set val(brp) blackholeAODV ; # blackhole aodv protocol mentioned here....
basicmhop.tcl:    puts {pent: Usage> ns pent.tcl [manet <DSR,AODV,TORA,OLSR> }
beacon_enabled_star.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
beacon_enabled_star.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
bhAODV.tcl:set val(nnaodv) 19 ;# number of AODV mobilenodes
bhAODV.tcl:set val(rp) AODV ;# routing protocol
bhAODV.tcl:#set val(cp) "/home/tclfiles/scenarios/scen1forAODV-n20-t500-x750-y750" ;#Connection Pattern
bhAODV.tcl:set val(cp) "./scenAODV"
bhAODV.tcl:# Creating mobile AODV nodes for simulation
bhAODV.tcl:$ns_ node-config -adhocRouting blackholeAODV
bhAODV.tcl:# ./setdest -n 20 -p 1.0 -M 20.0 -t 500 -x 750 -y 750 > scen1forAODV-n20-t500-x750-y750
bhoadv-Venkatesh.tcl:set val(rp)     AODV                      ;# routing protocol
bho.tcl:# RPGM, connection rate using AODV as Routing Protocol,no of node 20,blachole
bho.tcl:set opt(rp)	AODV 		;#routing protocol
blackhole__1.tcl:set val(routing) blackholeAODV
blackhole__1.tcl:set opt(ragent) Agent/rtProto/blackholeAODV
blackhole__1.tcl:puts "*** WARNING: blackholeAODV using $opt(pos) position configuration..."
blackhole__1.tcl:Agent/rtProto/blackholeAODV instproc init args {
blackhole__1.tcl:Agent/rtProto/blackholeAODV set sport_ 0
blackhole20-1.tcl:set val(rp)      AODV 
blackhole20-1.tcl:set val(brp)     blackholeAODV 
blackhole20-1-vbr.tcl:set val(rp)      AODV 
blackhole20-1-vbr.tcl:set val(brp)     blackholeAODV 
blackhole20.tcl:set val(rp)      AODV 
blackhole20.tcl:set val(brp)     blackholeAODV 
blackholeaodv-btechnos.tcl:set val(nnaodv)         19                                       ;# number of AODV mobilenodes
blackholeaodv-btechnos.tcl:set val(rp)             AODV                                     ;# routing protocol
blackholeaodv-btechnos.tcl:#set val(cp)             "scenarios/scen1forAODV-n20-t500-x750-y750"          ;#Connection Pattern
blackholeaodv-btechnos.tcl:# Creating mobile AODV nodes for simulation
blackholeaodv-btechnos.tcl:$ns_ node-config        -adhocRouting blackholeAODV
blackholeaodv-btechnos.tcl:# ./setdest -n 20 -p 1.0 -M 20.0 -t 500 -x 750 -y 750 > scen1forAODV-n20-t500-x750-y750
blackholeAODV-DevangPatel.tcl:set val(nnaodv)         19                                       ;# number of AODV mobilenodes
blackholeAODV-DevangPatel.tcl:set val(rp)             AODV                                     ;# routing protocol
blackholeAODV-DevangPatel.tcl:#set val(cp)             "scenarios/scen1forAODV-n20-t500-x750-y750"          ;#Connection Pattern
blackholeAODV-DevangPatel.tcl:# Creating mobile AODV nodes for simulation
blackholeAODV-DevangPatel.tcl:$ns_ node-config        -adhocRouting blackholeAODV
blackholeAODV-DevangPatel.tcl:# ./setdest -n 20 -p 1.0 -M 20.0 -t 500 -x 750 -y 750 > scen1forAODV-n20-t500-x750-y750
blackholeAODV-nabble_2.tcl:set opt(ragent) Agent/blackholeAODV
blackholeAODV-nabble_2.tcl:        puts "*** WARNING: blackholeAODV using $opt(pos) position configuration..."
blackholeAODV-nabble_2.tcl:Agent/blackholeAODV instproc init args {
blackholeAODV-nabble_2.tcl:Agent/rtProto/blackholeAODV set sport_ 0
blackholeAODV-nabble.tcl:set opt(ragent) Agent/rtProto/blackholeAODV
blackholeAODV-nabble.tcl:        puts "*** WARNING: blackholeAODV using $opt(pos) position configuration..."
blackholeAODV-nabble.tcl:Agent/rtProto/blackholeAODV instproc init args {
blackholeAODV-nabble.tcl:Agent/rtProto/blackholeAODV set sport_ 0
blackholeaodv.tcl:set opt(ragent)		Agent/rtProto/blackholeAODV
blackholeaodv.tcl:	puts "*** WARNING: blackholeAODV using $opt(pos) position configuration..."
blackholeaodv.tcl:Agent/rtProto/blackholeAODV instproc init args {
blackholeaodv.tcl:Agent/rtProto/blackholeAODV set sport_	0
blackholeattacks.tcl:set val(rp)         AODV                          ;# routing protocol
blackhole-NSG2.tcl:set val(rp)     AODV                       ;# routing protocol
BlackHole_Setting.tcl:#		set val(rp)            AODV  
blackhole.tcl:set val(rp)     AODV                       ;# routing protocol
box-example.tcl:set val(rp)         AODV
box-Helen.tcl:set val(rp) AODV
box-org.tcl:set val(rp)         AODV
box.tcl:set val(rp)         AODV
broadcastMAC_example.tcl:#remove-packet-header AODV ARP TORA  IMEP TFRC
caodv.tcl:set opt(ragent)		Agent/rtProto/CAODV 
caodv.tcl:	puts "*** WARNING: CAODV using $opt(pos) position configuration..." 
caodv.tcl:Agent/rtProto/CAODV instproc init args { 
caodv.tcl:Agent/rtProto/CAODV set sport_	0 
caodv.tcl:Agent/rtProto/CAODV set dport_	0 
case_burst_constructor_without_rs.tcl:set opt(rp)          AODV                       ;# routing protocol. DSDV, DSR, AODV.
case_burst_constructor_with_rs.tcl:set opt(rp)          AODV                       ;# routing protocol. DSDV, DSR, AODV.
case_multi_ss.tcl:set opt(rp)          AODV                       ;# routing protocol. DSDV, DSR, AODV.
case_one_ss.tcl:set opt(rp)          AODV                       ;# routing protocol. DSDV, DSR, AODV.
case_without_rs.tcl:set opt(rp)          AODV                       ;# routing protocol. DSDV, DSR, AODV.
case_with_rs.tcl:set opt(rp)          AODV                       ;# routing protocol. DSDV, DSR, AODV.
cat-n__test-random-topology.tcl:    48	set val(rp)             AODV                       ;# routing protocol
cat-n__test-random-topology.tcl:    57	# routing: 1 # AODV-MR
CBR-UDP-UWB_sample.tcl:                $node_($i) rt AODV
CBR-UDP-UWB_sample.tcl:        $ns_ at [expr (($i/10+0.2)+1+($i*2/10))] "$app($i) start"                 ;# Start transmission AODV get route
CBR-UDP-UWB_sample.tcl:        $ns_ at [expr (($i/10+0.2)+2+($i*2/10))] "$app($i) stop"                 ;# Stop transmission AODV get route
Clustering-moc_v1.tcl:                -adhocRouting  AODV \
compare.tcl:#set opt(rpr)	1	;#1 for DSR and anything else for AODV
compare.tcl:	set opt(adhocRouting)   AODV
CRCN-Harsh.tcl:set val(rp)        AODV     ;#Routing Protocol
cwsim.tcl:set val(rp)             AODV                       ;# routing protocol
dccp__lwx-LTE__nassou19891.tcl:set opt(rp)          AODV                       ;# routing protocol. DSDV, DSR, AODV.
Dir-antenna-test.tcl:#One can use AODV also , all other wireless protocols currently don't work
Dir-antenna-test.tcl:set val(rp) AODV ;# routing protocol
drbt.tcl:set val(rp)                     AODV
dream_2.tcl:set opt(adhocRouting)   AODV
dream_2.tcl:add-packet-header AODV
dream-org.tcl:set opt(adhocRouting)   AODV
dream-org.tcl:add-packet-header AODV
dream.tcl:set opt(adhocRouting)   AODV
dream.tcl:add-packet-header AODV
dsr---aodv-m.tcl: set val(rp)	       AODV                     ;# routing protocol
dtn-wireless-1-rand.tcl:remove-packet-header AODV SR TORA IMEP MIP IPinIP Encap
estudy.tcl:set opt(rp)             AODV            ;# routing protocol script
example1-aodv.tcl:set opt(adhocRouting)   AODV                   ;# routing protocol
example-zrp-100nodes.tcl:#not ready for that yet. I also obviously changed AODV for ZRP below.
example-zrp.tcl:#not ready for that yet. I also obviously changed AODV for ZRP below.
ex_traci.tcl:set val(rp)     AODV		      ;# routing protocol
ex_without_tracie.tcl:set val(rp)     AODV		      ;# routing protocol
fairsim.tcl:set val(rp)             AODV                       ;# routing protocol
frame_afr-david.tcl:remove-packet-header AODV ARP IMEP IPinIP IVS LDP MPLS MIP Ping PGM PGM_SPM PGM_NAK NV Smac Pushback TORA TFRC_ACK TFRC 
GAF-2477352.tcl:#wireless model using AODV
GAF-2477352.tcl:set opt(rp)             AODV            ;# routing protocol script
GAF-2477352.tcl:set opt(rp)         AODV
gaf.tcl:set val(rp) AODV ;# routing protocol
graph3.tcl:set val(rp)		AODV				;# routing protocol
grayholeaodv.tcl:set opt(ragent)		Agent/rtProto/grayholeAODV
grayholeaodv.tcl:	puts "*** WARNING: grayholeAODV using $opt(pos) position configuration..."
grayholeaodv.tcl:Agent/rtProto/grayholeAODV instproc init args {
grayholeaodv.tcl:Agent/rtProto/grayholeAODV set sport_	0
han_802_11.tcl:set val(rp)	AODV
HAN.tcl:set val(rp)	AODV
harshav.tcl:set val(rp) AODV ;#Routing Protocol
hdlc-cbr.tcl:#set val(rp)             AODV                     
hdrsize.tcl:# PacketHeader/AODV 804
hdtv-afr-david.tcl:remove-packet-header AODV ARP IMEP IPinIP IVS LDP MPLS MIP Ping PGM PGM_SPM PGM_NAK NV Smac Pushback TORA TFRC_ACK TFRC 
idsaodv-1.tcl:set opt(ragent)		Agent/idsAODV
idsaodv-1.tcl:	puts "*** WARNING: idsAODV using $opt(pos) position configuration..."
idsaodv-1.tcl:Agent/idsAODV instproc init args {
idsaodv-1.tcl:Agent/idsAODV set sport_	0
idsaodv2.tcl:set val(nnaodv)         19                                       ;# number of AODV mobilenodes
idsaodv2.tcl:set val(rp)             idsAODV                                     ;# routing protocol
idsaodv2.tcl:# Creating mobile AODV nodes for simulation
idsaodv2.tcl:$ns_ node-config        -adhocRouting blackholeAODV
idsaodv2.tcl:# ./setdest -n 20 -p 1.0 -M 20.0 -t 500 -x 750 -y 750 > scen1forAODV-n20-t500-x750-y750
idsaodv.tcl:set opt(ragent)		Agent/rtProto/idsAODV
idsaodv.tcl:	puts "*** WARNING: idsAODV using $opt(pos) position configuration..."
idsaodv.tcl:Agent/rtProto/idsAODV instproc init args {
idsaodv.tcl:Agent/rtProto/idsAODV set sport_	0
IDStest06_dos.tcl:set val(rp)             AODV                    ;# routing protocol
IDStest06_dos.tcl:set val(rp) AODV                                ;# AODV routing protocol
IDStest06_dos.tcl:set val(rp) AODV                             ;# AODV routing protocol
IDStest06_dos_uu.tcl:set val(rp)             AODV                    ;# routing protocol
IDStest06_dos_uu.tcl:set val(rp) AODVUU                                ;# AODV routing protocol
IDStest06_dos_uu.tcl:set val(rp) AODVUU                             ;# AODV routing protocol
IDStest06_sybil.tcl:set val(rp)             AODV                    ;# routing protocol
IDStest06_sybil.tcl:set val(rp) AODVUU                                ;# AODV routing protocol
IDStest06_sybil.tcl:set val(rp) AODVUU                             ;# AODV routing protocol
IDStest06_wormhole.tcl:set val(rp)             AODV                    ;# routing protocol
IDStest06_wormhole.tcl:set val(rp) AODV                                ;# AODV routing protocol
IDStest06_wormhole.tcl:set val(rp) AODV                             ;# AODV routing protocol
IDStest06_wormhole_uu.tcl:set val(rp)             AODV                    ;# routing protocol
IDStest06_wormhole_uu.tcl:set val(rp) AODVUU                                ;# AODV routing protocol
IDStest06_wormhole_uu.tcl:set val(rp) AODVUU                             ;# AODV routing protocol
IDS_trafficmodel.tcl:set val(rp)             AODV                    ;# routing protocol
IDS_trafficmodel.tcl:set val(rp) AODVUU                                ;# AODV routing protocol
im2s2pmesh.tcl:set val(rp)             AODV                       ;# routing protocol
im2s2p.tcl:set val(rp)             AODV                       ;# routing protocol
im3pmanual.tcl:set val(rp)             AODV                       ;# routing protocol
im3pmesh.tcl:set val(rp)             AODV                       ;# routing protocol
im3p.tcl:set val(rp)             AODV                       ;# routing protocol
im3s1pmesh.tcl:set val(rp)             AODV                       ;# routing protocol
im3s1p.tcl:set val(rp)             AODV                       ;# routing protocol
im3spmesh.tcl:set val(rp)             AODV                       ;# routing protocol
im3sp.tcl:set val(rp)             AODV                       ;# routing protocol
im4smesh.tcl:set val(rp)             AODV                       ;# routing protocol
im4s.tcl:set val(rp)             AODV                       ;# routing protocol
input.tcl:set val(rp)             AODV                       ;# routing protocol 
joseph4-13.tcl:set val(rp) AODV ;# routing protocol 
joseph4.tcl:set val(rp) AODV ;# routing protocol 
kien2106-exam.tcl:set val(rp) "AODV"
leki-test-crcn.tcl:set val(rp)        AODV     ;#Routing Protocol
loc1.tcl:set val(rp)			AODV								;# routing protocol
loc2.tcl:set val(rp)			AODV								;# routing protocol
loc3.tcl:set val(rp)			AODV								;# routing protocol
loc4.tcl:set val(rp)			AODV								;# routing protocol
loc5.tcl:set val(rp)			AODV								;# routing protocol
loc6.tcl:set val(rp)			AODV								;# routing protocol
mailman-correct-AODV.tcl:set opt(ragent)		Agent/AODV
mailman-correct-AODV.tcl:	puts "*** WARNING: AODV using $opt(pos) position configuration..."
mailman-correct-AODV.tcl:Agent/AODV instproc init args {
mailman-correct-AODV.tcl:Agent/AODV set sport_	0
mailman-correct-AODV.tcl:Agent/AODV set dport_	0
mal__anand755.tcl:set val(rp)            AODV			    ;# protocol tye
malicious.tcl:set val(rp)             AODV                       ;# routing protocol
manet0.tcl:#add-packet-header IP LL Mac AODV AOMDV ATR DSDV DSR OLSR UDP TCP CBR FTP ;# needed headers
ManetwrtAODV.tcl:#set val(adhocRouting) AODV
maodv_802_15_4-hacker2.tcl:set val(rp)            AODV			    ;# protocol tye
maodv_802_15_4.tcl:set val(rp)            AODV			    ;# protocol tye
maodv_apar2610.tcl:set val(rp) AODV ;# routing protocol
maodv_apar2610.tcl:$ns at 0.0100000000 "$n7 AODV join-group $group0"
maodv_apar2610.tcl:$ns at 3.0 "$n7 AODV leave-group $group0"
maodv_apar2610.tcl:$ns at 0.0100000000 "$n24 AODV join-group $group0"
maodv_apar2610.tcl:$ns at 5.0 "$n24 AODV leave-group $group0"
m-aodv-chenil.tcl: set val(rp)	       AODV                     ;# routing protocol
m-aodv_saa-6611.tcl:$ns node-config -adhocRouting AODV
m-aodvtcl.tcl: set val(rp)	       AODV                     ;# routing protocol
mastertclfile.tcl:                                                    ;# For AODV : Queue/DropTail/PriQueue
mastertclfile.tcl:set val(rp_norm)        AODV                        ;# Normal Protocol
mastertclfile.tcl:set val(rp_trust)       TRUSTAODV                   ;# Trusted Protocol
mastertclfile.tcl:set val(rp_black_route) BLACKHOLEonRouteAODV        ;# Black Holes Faking On Route
mastertclfile.tcl:set val(rp_black_dst)   BLACKHOLEfakeDstReplyAODV   ;# Black Holes Facking Route + Reached Dst
mastertclfile.tcl:set val(rp_grey)        GREYHOLEAODV                ;# Grey Holes
mastertclfile.tcl:set val(rp_mod)         MODIFICATIONAODV            ;# Modification Nodes (Modify data/headers)
m-example1.tcl:set val(rp)      AODV	                  ;# routing protocol 
mezyana-30-OLSR.tcl:$ns_ at 0.0 "$node_(0) label \"Src_AODV\""
mezyana-30-OLSR.tcl:     $ns_ at 0.0 "$node_(19) label \"Dest_AODV\""
mezyana-30.tcl:$ns_ at 0.0 "$node_(0) label \"Src_AODV\""
mezyana-30.tcl:     $ns_ at 0.0 "$node_(19) label \"Dest_AODV\""
mezyana-30-WCETT.tcl:$ns_ at 0.0 "$node_(0) label \"Src_AODV\""
mezyana-30-WCETT.tcl:     $ns_ at 0.0 "$node_(19) label \"Dest_AODV\""
mgen01.tcl:set val(rp)             AODV                       ;# routing protocol
mimo.tcl:set val(rp) AODV ;# routing protocol
model-afr-david.tcl:remove-packet-header AODV ARP IMEP IPinIP IVS LDP MPLS MIP Ping PGM PGM_SPM PGM_NAK NV Smac Pushback TORA TFRC_ACK TFRC 
Mod_new.tcl:set val(rp) 	AODV 				;# routing protocol
mr5n.tcl:    $node($i) rt AODV
MRMAC.tcl:set val(rp)        AODV     ;#Routing Protocol
ms5n1.tcl:    $node($i) rt AODV
ms5n.tcl:    $node($i) rt AODV
mtp.tcl:  # DSDV DSR TORA AODV
_multihop_500x500.tcl:set val(rp)             AODV                  ;# routing protocol
multi-hop.tcl:set val(rp)             AODV                  ;# routing protocol
multislot.tcl:$node(0) rt AODV
multislot.tcl:$node(1) rt AODV
nan_TV.tcl:set val(rp)	AODV
NAN_TV.tcl:set val(rp)	AODV
nan_wimax.tcl:set val(rp)	AODV
no-good__wireless1-rand.tcl:set val(rp)             AODV                       ;# routing protocol
nonmalicious.tcl:set val(rp)             AODV                       ;# routing protocol
no-valid__rtProto-blackholeAODV-lib.tcl:# Ns-2 integration of blackholeAODV routing agent by a Tcl source file
no-valid__rtProto-blackholeAODV-lib.tcl:Agent/rtProto/blackholeAODV set preference_ 120
no-valid__rtProto-blackholeAODV-lib.tcl:Agent/rtProto/blackholeAODV set UNREACHABLE [rtObject set unreach_]
no-valid__rtProto-blackholeAODV-lib.tcl:Agent/rtProto/blackholeAODV set INFINITY [Agent set ttl_]
no-valid__rtProto-blackholeAODV-lib.tcl:Agent/rtProto/blackholeAODV set probingInterval 1000m
no-valid__rtProto-blackholeAODV-lib.tcl:# Initialize blackholeAODV on all nodes
no-valid__rtProto-blackholeAODV-lib.tcl:Agent/rtProto/blackholeAODV proc init-all args {
no-valid__rtProto-blackholeAODV-lib.tcl:		set proto($node) [[$node rtObject?] add-proto blackholeAODV $node]
no-valid__rtProto-blackholeAODV-lib.tcl:			set rtproto [$rtobj rtProto? blackholeAODV]
no-valid__rtProto-blackholeAODV-lib.tcl:			set rtproto [$rtobj rtProto? blackholeAODV]
no-valid__rtProto-blackholeAODV-lib.tcl:# Initialize blackholeAODV on node
no-valid__rtProto-blackholeAODV-lib.tcl:Agent/rtProto/blackholeAODV instproc init node {
no-valid__rtProto-blackholeAODV-lib.tcl:	Agent/rtProto/blackholeAODV instvar preference_
no-valid__rtProto-blackholeAODV-lib.tcl:Agent/rtProto/blackholeAODV instproc compute-routes {} {
no-valid__rtProto-blackholeAODV-lib.tcl:Agent/rtProto/blackholeAODV instproc install-routes {} {
no-valid__rtProto-blackholeAODV-lib.tcl:			# no path found in blackholeAODV
no-valid__rtProto-blackholeAODV-lib.tcl:Agent/rtProto/blackholeAODV proc compute-all {} {
no-valid__rtProto-blackholeAODV-lib.tcl:Agent/rtProto/blackholeAODV instproc get-node-id {} {
no-valid__rtProto-blackholeAODV-lib.tcl:Agent/rtProto/blackholeAODV instproc get-node-addr {} {
no-valid__rtProto-blackholeAODV-lib.tcl:Agent/rtProto/blackholeAODV instproc add-peer {neighbor agentAddr
no-valid__rtProto-blackholeAODV-lib.tcl:Agent/rtProto/blackholeAODV instproc get-peers {} {
no-valid__rtProto-blackholeAODV-lib.tcl:Agent/rtProto/blackholeAODV instproc startProbing {} {
ns2-lte-wireless.tcl:set val(rp)             AODV                       ;# routing protocol 
ns2parameters.tcl:set RoutingProto "DSR"; # DSR or AODV
ns2parameters.tcl:} elseif { $RoutingProto == "AODV" } {
ns2parameters.tcl:	set val(rp)            AODV                      ;# routing protocol
ns2.tcl:set val(rp) AODV ;# routing protocol
ns-agent.tcl:Agent/AODV instproc init args {
ns-agent.tcl:Agent/AODV set sport_   0
ns-agent.tcl:Agent/AODV set dport_   0
ns-btnode.tcl:	    AODV {
ns-btnode.tcl:	 	set rag [new Agent/AODV/BT $addr]
ns-bttrace.tcl:	# Special processing for AODV
ns-bttrace.tcl:	set aodvonly [string first "AODV" [$agent info class]] 
ns-lib.tcl:		    AODV {
ns-lib.tcl:        #  Create AODV routing agent
ns-lib.tcl:	set ragent [new Agent/AODV [$node node-addr]]
ns-mobilenode_EDCA.tcl:	# Special processing for AODV
ns-mobilenode_EDCA.tcl:	set aodvonly [string first "AODV" [$agent info class]] 
ns-mobilenode-tap-pudn.tcl:	# Special processing for AODV
ns-mobilenode-tap-pudn.tcl:	set aodvonly [string first "AODV" [$agent info class]] 
ns-mobilenode.tcl:	# Special processing for AODV
ns-mobilenode.tcl:	set aodvonly [string first "AODV" [$agent info class]] 
ns-packet.tcl:# specific simulation, follow this pattern (e.g., you want to remove AODV,
ns-packet.tcl:#   remove-packet-header AODV ARP
ns-packet.tcl:# To include only a specific set of headers in your simulation, e.g., AODV
ns-packet.tcl:#   add-packet-header AODV ARP
ns-packet.tcl:	AODV 	# routing protocol for ad-hoc networks
ns-packet.tcl:#  	{ AODV off_AODV_ }
ns__TAP.mobilenode.tcl:        # Special processing for blackholeAODV
ns__TAP.mobilenode.tcl:	set blackholeaodvonly [string first "blackholeAODV" [$agent info class]] 
ns__TAP.mobilenode.tcl:	# Special processing for AODV
ns__TAP.mobilenode.tcl:            set aodvonly [string first "AODV" [$agent info class]] 
ns__TAP.mobilenode.tcl:        # Special processing for blackholeAODV
ns__TAP.mobilenode.tcl:	set blackholeaodvonly [string first "blackholeAODV" [$agent info class]] 
ns.tcl:$ns_ node-config -adhocRouting AODV \
oll.tcl:set val(adhocRouting)   AODV			;#routing protocol
onepair_realbw.tcl:set val(rp)		AODV				;#routing protocol
onepair_realbw.tcl:add-packet-header IP Message AODV	;#headers required for cbr traffic and AODV
onepair.tcl:set val(rp)		AODV				;#routing protocol
onepair.tcl:add-packet-header IP Message AODV	;#headers required for cbr traffic and AODV
orig-ansarsatti.tcl:#remove-packet-header AODV ARP IMEP IPinIP IVS LDP MPLS MIP Ping PGM PGM_SPM PGM_NAK NV Smac Pushback TORA TFRC_ACK TFRC ;# original
orig-mal__anand755.tcl:set val(rp)            AODV			    ;# protocol tye
orig-maodv_apar2610.tcl:set val(rp) AODV ;# routing protocol
pdf____.tcl:#remove-packet-header AODV ARP IMEP IPinIP IVS LDP MPLS MIP Ping PGM
phenom05.tcl:# via AODV.  Node 1 is configured with two wireless interfaces, one on channel
phenom05.tcl:set val(rp)             AODV                       ;# routing protocol
phenom05.tcl:set val(rp) AODVUU                                ;# AODV routing protocol
phenom06.tcl:set val(rp)             AODV                    ;# routing protocol
phenom06.tcl:set val(rp) AODV                                ;# AODV routing protocol
phenom06.tcl:set val(rp) AODV                             ;# AODV routing protocol
phenom07.tcl:set val(rp)             AODV                       ;# routing protocol
phenom07.tcl:set val(rp) AODV                                ;# AODV routing protocol
phenom08b.tcl:# to see how much longer that udp traffic lingers in the network with AODV as 
phenom08b.tcl:set val(rp)             AODV                    ;# routing protocol
phenom08.tcl:# to see how much longer that udp traffic lingers in the network with AODV as 
phenom08.tcl:set val(rp)             AODV                    ;# routing protocol
phenom09.tcl:set val(rp)             AODV                    ;# routing protocol
phenom09.tcl:set val(rp) AODV
phenom10.tcl:set val(rp)             AODV                    ;# routing protocol
phenom11.tcl:set val(rp)             AODV                     ;# routing protocol
phenom12.tcl:set val(rp)             AODV                       ;# routing protocol
phenom12.tcl:set val(rp) AODV
phenom13.tcl:#   But with AODV, it looks like a real backlog is created, since there are
phenom13.tcl:#   UDP reponses thru an AODV driven network.
phenom13.tcl:set val(rp)             AODV                    ;# routing protocol
phenom14m.tcl:# sensor nodes, running AODV.  Other simulation parameters include:
phenom14m.tcl:set val(rp)        AODV                     ;# routing protocol
phenom14.tcl:# sensor nodes, running AODV.  Other simulation parameters include:
phenom14.tcl:set val(rp)        AODV                     ;# routing protocol
phyrate-afr_david.tcl:remove-packet-header AODV ARP IMEP IPinIP IVS LDP MPLS MIP Ping PGM PGM_SPM PGM_NAK NV Smac Pushback TORA TFRC_ACK TFRC 
pico-3mb.tcl:    $node($i) rt AODV
pico.tcl:    $node($i) rt AODV
project-code_input.tcl:set val(rp)             AODV                       ;# routing protocol 
random_realbw.tcl:set val(rp)		AODV				;#routing protocol
random_realbw.tcl:add-packet-header IP Message AODV	;#headers required for cbr traffic and AODV
R-aodv.tcl:#puts "1. AODV" 
R-aodv.tcl:set opt(rp)             AODV                       ;# routing protocol 
rcs_sim.tcl:set val(rp)             AODV                       ;# routing protocol
rede-hierarquica-nam.tcl:set val(rp)  AODV      ; # routing protocol 
ricean-sample.tcl:#set val(rp)             AODV                     
rmac-example.tcl:#remove-packet-header AODV ARP TORA  IMEP TFRC
roaming-node.tcl:# Roaming node scenario using AODV-UU (inspired by APE roaming node scenario)
roaming-node.tcl:set val(adhocRP)        AODVUU
roaming-node.tcl:    set val(adhocRP) AODVUU;
roaming-node.tcl:    set val(adhocRP) AODV;
rphsi.tcl:    $node($i) rt AODV
rs.tcl:$node(0) rt AODV
rs.tcl:$node(1) rt AODV
rushingattacks-1.tcl:set val(rp)     AODV                      ;# routing protocol
rushingattacks.tcl:set val(rp)     AODV                      ;# routing protocol
rwp_10.tcl:set opt(adhocRouting)   AODV
s3.tcl:        set node [new AODVNode]         ;# create a mobile node
Sample-TeNs.tcl:#One can use AODV also , all other wireless protocols currently don't work
Sample-TeNs.tcl:set val(rp) AODV ;# routing protocol
scat-form-law.tcl:set btRouting AODV
Scenario1.tcl:set val(rp)             AODV                       ;# routing protocol
scripto.tcl:set opt(ragent)		Agent/AODV
scripto.tcl:Agent/AODV instproc init args {
sim1forBlackHole_5.tcl:set val(nnaodv) 	19 				;# number of AODV mobilenodes
sim1forBlackHole_5.tcl:set val(rp) 		AODV 				;# routing protocol
sim1forBlackHole_5.tcl:# Creating mobile AODV nodes for simulation
sim1forBlackHole_5.tcl:$ns_ node-config 	-adhocRouting blackholeAODV
sim1forBlackHole_5.tcl:# ./setdest -n 20 -p 1.0 -M 20.0 -t 500 -x 750 -y 750 > scen1forAODV-n20-t500-x750-y750
sim1forBlackHole.tcl:set val(nnaodv) 	19 				;# number of AODV mobilenodes
sim1forBlackHole.tcl:set val(rp) 		AODV 				;# routing protocol
sim1forBlackHole.tcl:set val(cp) 		"scenarios/scen1forAODV-n20-t500-x750-y750" 	;#Connection Pattern
sim1forBlackHole.tcl:# Creating mobile AODV nodes for simulation
sim1forBlackHole.tcl:$ns_ node-config 	-adhocRouting blackholeAODV
sim1forBlackHole.tcl:# ./setdest -n 20 -p 1.0 -M 20.0 -t 500 -x 750 -y 750 > scen1forAODV-n20-t500-x750-y750
simple-manet.tcl:set val(rp)             AODV                     ;# routing protocol
simple-manet.tcl:    puts {cbr_mobile: Usage> ns simple_manet.tcl [manet <DSR,AODV,TORA,OLSR,NRLOLSR,others> }
simple-mobile.tcl:set val(rp)             AODV                       ;# routing protocol
simpleworking.tcl:    puts {pent: Usage> ns pent.tcl [manet <DSR,AODV,TORA,OLSR> }
sip-example-sctp.tcl:remove-packet-header NV LDP MPLS rtProtoLS Ping RAP AODV SR TORA IMEP Encap HttpInval MFTP SRMEXT
sip-example-udp.tcl:remove-packet-header NV LDP MPLS rtProtoLS Ping RAP AODV SR TORA IMEP Encap HttpInval MFTP SRMEXT
smac-aodv-dsdv.tcl:set opt(rp)             AODV           ;# routing protocol script
sofiane.tcl:set val(rp)                     AODV
sq-tcp-afr-david.tcl:remove-packet-header AODV ARP IMEP IPinIP IVS LDP MPLS MIP Ping PGM PGM_SPM PGM_NAK NV Smac Pushback TORA TFRC_ACK TFRC 
squares.tcl:set val(rp)             AODV                       ;# routing protocol
sta-afr-david.tcl:remove-packet-header AODV ARP IMEP IPinIP IVS LDP MPLS MIP Ping PGM PGM_SPM PGM_NAK NV Smac Pushback TORA TFRC_ACK TFRC 
sta_tcp-afr-david.tcl:remove-packet-header AODV ARP IMEP IPinIP IVS LDP MPLS MIP Ping PGM PGM_SPM PGM_NAK NV Smac Pushback TORA TFRC_ACK TFRC 
sta_voip.tcl:remove-packet-header AODV ARP IMEP IPinIP IVS LDP MPLS MIP Ping PGM PGM_SPM PGM_NAK NV Smac Pushback TORA TFRC_ACK TFRC 
step.tcl:set val(rp)         AODV
tbmr_demo.tcl:# -- AODV:
tbmr_demo.tcl:#       ns tbmr_demo.tcl -rp AODV -nam none
tbmr_demo.tcl:#       ns tbmr_demo.tcl -nx 10 -ny 10 -pc 0 -rp AODV -nam none -trInterval 0.2 -tdma 4 -masmTSC 14
tbmr_demo.tcl:set val(rtType)         1                          ;# routing type (0 -- ART; 1 -- MART; 2 -- MART + AODV; 3 -- TDLS)
tbmr_demo.tcl:# Before doing anything, generate some random values that will be same to both TBMR and AODV
tbmr_demo.tcl:	Agent/AODV TDMA $val(tdma)			;# use TDMA at routing layer (default true)
tbmr_demo.tcl:	#puts [format "TDMA: %s" [Agent/AODV TDMA]]
tbmr_demo.tcl:	Agent/AODV MASMTSC $val(masmTSC)		;# set time slot cycle of MASM
tbmr_demo.tcl:	#puts [format "MASMTSC: %s" [Agent/AODV MASMTSC]]
tbmr_demo.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
tbmr_demo.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
tcp-afr-david.tcl:remove-packet-header AODV ARP IMEP IPinIP IVS LDP MPLS MIP Ping PGM PGM_SPM PGM_NAK NV Smac Pushback TORA TFRC_ACK TFRC 
tdrp.tcl:    $node($i) rt AODV
tes-gpsr.tcl:set val(rp)             	GPSR                      	;# routing protocol AODV
tes-gpsr.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
tes-LAR.tcl:set val(rp)             	AODV                      	;# routing protocol AODV
tes-LAR.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
test1-nadiui.tcl:set val(rp)         AODV                          ;# routing protocol
test1-nadiui.tcl:$ns_ node-config        -adhocRouting blackholeAODV 
test2Group.tcl:#set val(rp)			AODV
test-3nodes.tcl:set val(rp)             AODV                       ;# routing protocol
test-3nodes.tcl:# routing: 1 # AODV-MR
test4maccon.tcl:set val(rp)        AODV     ;#Routing Protocol
test4macng random topo 2 channels.tcl:set val(rp)        AODV     ;#Routing Protocol
test4macng random topo 5 channels.tcl:set val(rp)        AODV     ;#Routing Protocol
test4macng.tcl:set val(rp)        AODV     ;#Routing Protocol
Test4mycrmac1-1.tcl:set val(rp)        AODV     ;#Routing Protocol
test4mycrmac1.tcl:set val(rp)        AODV     ;#Routing Protocol
Test4mycrmac1.tcl:set val(rp)        AODV     ;#Routing Protocol
Binary file test_a2mp.tcl matches
testAodv.tcl:set tf [open /tmp/AODVout.tr w]
testAodv.tcl:	set ip_($i) [new Routing/AODV]
testAODV.tcl:# http://code.google.com/p/ns2-gators/wiki/AODVtestcode
testAODV.tcl:# A 100-node example for ad-hoc simulation with AODV
testAODV.tcl:set tracefd       [open testAODV.tr w]
testAODV.tcl:set namtrace      [open testAODV.nam w]
testblack-1.tcl:set val(rp)         AODV                          ;# routing protocol
testblack-1.tcl:$ns_ node-config -adhocRouting blackholeAODV 
testblack-1.tcl:$ns_ node-config -adhocRouting AODV 
tes.tcl:set val(rp)             	DREAM                      	;# routing protocol AODV
tes.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
test_inq.tcl:        $node($i) rt AODV
test_o.tcl:set opt(adhocRouting) AODV ;# routing protocol
test-random-topology.tcl:set val(rp)             AODV                       ;# routing protocol
test-random-topology.tcl:# routing: 1 # AODV-MR
test-random-topology__use-options.tcl:set val(rp)             AODV                       ;# routing protocol
test-random-topology__use-options.tcl:# routing: 1 # AODV-MR
test_sco.tcl:    $node($i) rt AODV
test_sdp.tcl:        $node($i) rt AODV
test-sfama.tcl:#remove-packet-header AODV ARP TORA  IMEP TFRC
test-suite-energy.tcl:   set opt(rp)             AODV
test-suite-wireless-lan-aodv.tcl:#wireless model using AODV
test-suite-wireless-lan-aodv.tcl:	$ns_ node-config -adhocRouting AODV \
test-suite-wireless-lan-ap1.tcl:	$ns_ node-config -adhocRouting AODV \
test-suite-wireless-lan-gaf.tcl:#wireless model using AODV
test-suite-wireless-lan-gaf.tcl:set opt(rp)             AODV            ;# routing protocol script
test-suite-wireless-lan-gaf.tcl:	set opt(rp)         AODV
test-suite-wpan.tcl:add-packet-header Flags IP RTP TCP ARP LL Mac LRWPAN AODV ;
test-suite-wpan.tcl:	set val(rp)             AODV                       ;# routing
test.tcl:	set aodv_($nodeId) [new Routing/AODV]
test.tcl:	$node($nodeId) addModule 4 $aodv_($nodeId) $traceVer "AODV"
test.tcl:	$node($nodeId) addModule 4 $aodv1_($nodeId) $traceVer "AODV1"
test.tcl:	puts "AODV [$aodv_($nodeId) id_]"
test.tcl:	puts "AODV1 [$aodv1_($nodeId) id_]"
test.tcl:	set routing_($nodeId) [new Routing/AODV]
test.tcl:	$node($nodeId) addModule 4 $routing_($nodeId) $traceVer "AODV"
test.tcl:	puts "AODV [$routing_($nodeId) id_]"
tes-wpan.tcl:set val(rp)             	AODV                      	;# routing protocol AODV
tes-wpan.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
threepairs_realbw.tcl:set val(rp)		AODV				;#routing protocol
threepairs_realbw.tcl:add-packet-header IP Message AODV	;#headers required for cbr traffic and AODV
threepairs.tcl:set val(rp)		AODV				;#routing protocol
threepairs.tcl:add-packet-header IP Message AODV	;#headers required for cbr traffic and AODV
totti-roma_file2.tcl:$ns node-config -adhocRouting AODV \
twopairs_realbw.tcl:set val(rp)		AODV				;#routing protocol
twopairs_realbw.tcl:add-packet-header IP Message AODV	;#headers required for cbr traffic and AODV
twopairs.tcl:set val(rp)		AODV				;#routing protocol
twopairs.tcl:add-packet-header IP Message AODV	;#headers required for cbr traffic and AODV
UC-multihop.tcl:set val(rp)             AODV                       ;# routing protocol 
udp.tcl:set val(rp)             AODV ;# routing protocol
umts_fdd_example.tcl:remove-packet-header AODV SR TORA IPinIP 
umts_tdd_example.tcl:remove-packet-header AODV SR TORA IPinIP 
uwan-mac-random.tcl:#remove-packet-header AODV ARP TORA  IMEP TFRC
wifi.tcl:	   -adhocRouting AODV \
wired_wireless_ex.tcl:    Agent/AODV set gw_discovery 0
wired_wireless_ex.tcl:    Agent/AODV set gw_discovery 1
wired_wireless_ex.tcl:    Agent/AODV set gw_discovery 2
wired_wireless_ex.tcl:$ns node-config -adhocRouting AODV
wired_wireless.tcl:    #NOTE! This assumes that AODV is used and that GATEWAY_DISCOVERY is defined
wired_wireless.tcl:	Agent/AODV set gw_discovery 0
wired_wireless.tcl:	Agent/AODV set gw_discovery 1
wired_wireless.tcl:    $ns node-config -adhocRouting AODV
wireless-aodv-malicious.tcl:set val(rp) AODV ;# routing protocol
wireless-demo-csci694_aodv-uu.tcl:# Define options : Line 53 (DSDV) was edited to AODVUU, ref. @khinmyo, http://www.linuxquestions.org/questions/showthread.php?p=4886074#post4886074
wireless-demo-csci694_aodv-uu.tcl:set opt(adhocRouting)   AODVUU	      ;# aodv-uu
wireless-flooding.tcl:# DumbAgent, AODV, and DSDV work.  DSR is broken
wireless-flooding.tcl:#set val(rp)		 AODV
wireless-om.tcl:set opt(adhocRouting)   AODV
wireless-sim-aodvetx.tcl:set val(rp)             AODVETX                    ;# routing protocol
wireless-sim-aodv-grid.tcl:set val(rp)             AODVETX                    ;# routing protocol
wireless-sim-aodv.tcl:set val(rp)             AODV                       ;# routing protocol
wireless-simple-mac.tcl:#set val(rp)             AODV                     
wireless-tcp.tcl:set val(rp)             AODV                       ;# routing protocol
wireless-template.tcl:set val(rp)             AODV                  ;# routing protocol
wormhole-Mellia.tcl:set val(rp)     AODV                       ;# routing protocol
wpan868.tcl:set val(rp)             AODV                       ;# routing protocol
wpan_demo1__Dream2.tcl:#           AODV over 802.15.4            #
wpan_demo1__Dream2.tcl:set val(rp)             AODV                       ;# routing protocol
wpan_demo1__Dream2.tcl:add-packet-header AODV
wpan_demo1__Dream2.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo1__Dream2.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo1__Dream.tcl:#           AODV over 802.15.4            #
wpan_demo1__Dream.tcl:set val(rp)             AODV                       ;# routing protocol
wpan_demo1__Dream.tcl:add-packet-header AODV
wpan_demo1__Dream.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo1__Dream.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo1_GPSR_Dream.tcl:#           AODV over 802.15.4            #
wpan_demo1_GPSR_Dream.tcl:set val(rp)             AODV                       ;# routing protocol
wpan_demo1_GPSR_Dream.tcl:add-packet-header AODV
wpan_demo1_GPSR_Dream.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo1_GPSR_Dream.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo1_GPSR-LAR.tcl:#           AODV over 802.15.4            #
wpan_demo1_GPSR-LAR.tcl:add-packet-header AODV
wpan_demo1_GPSR-LAR.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo1_GPSR-LAR.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo1-GPSR.tcl:#           AODV over 802.15.4            #
wpan_demo1-GPSR.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo1-GPSR.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo1_LAR.tcl:#           AODV over 802.15.4            #
wpan_demo1_LAR.tcl:set val(rp)             AODV                       ;# routing protocol
wpan_demo1_LAR.tcl:add-packet-header AODV
wpan_demo1_LAR.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo1_LAR.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo1.tcl:#           AODV over 802.15.4            #
wpan_demo1.tcl:set val(rp)             AODV                       ;# routing protocol
wpan_demo1.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo1.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo2.tcl:set val(rp)             AODV                       ;# routing protocol
wpan_demo2.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo2.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo3.tcl:set val(rp)             AODV                       ;# routing protocol
wpan_demo3.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo3.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo4b_m.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo4b_m.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo4b_p.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo4b_p.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo4b.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo4b.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo4_m.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo4_m.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo4_p.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo4_p.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo4.tcl:set val(rp)             AODV                       ;# AODV Routing
wpan_demo4.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo4.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo5.tcl:set val(rp)             AODV                       ;# AODV Routing
wpan_demo5.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wpan_demo5.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wrls0.tcl:set val(rp) AODV ;# routing protocol
wrls1-aodv.tcl:# A 3-node example for ad-hoc simulation with AODV 
wrls1-aodv.tcl:set val(rp)             AODV                       ;# routing protocol 
wrls1.tcl:# A 3-node example for ad-hoc simulation with AODV 
wrls1.tcl:set val(rp)             AODV                       ;# routing protocol 
wrls-aodv-sayeh.tcl:# A 3-node example for ad-hoc simulation with AODV
wrls-aodv-sayeh.tcl:set val(rp)             AODV                       ;# routing protocol
wrls-aodv.tcl:set val(rp)             AODV                       ;# routing protocol
wrls_test.tcl:# ns-2 simulation scenario for ad-hoc simulation with AODV
wrls_test.tcl:set val(rp)             AODV                       ;# routing protocol
wsn1.tcl: set val(rp)             AODV                       ;# routing protocol
wsn1.tcl:    Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wsn1.tcl:    Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wsn1-to-be-edited.tcl:>> set val(rp)             AODV                       ;# routing protocol
wsn1-to-be-edited.tcl:>>    Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
wsn1-to-be-edited.tcl:>>    Mac/802_15_4 wpanNam FlowClr -p AODV -c tomato
zigbee-aodv-elmurod.tcl:11	set val(rp)            AODV             ;# protocol tye
zigbee.tcl:set val(rp)             AODV                       ;# 路由协议：AODV（DSR/ZBR/AOMDV/AODV）
zigbee.tcl:   Mac/802_15_4 wpanNam FlowClr -p AODV -c green

#define simulatio parameters
set opt(chan)           Channel/Channel_802_11    		;#Channel Type
set opt(prop)           Propagation/Shadowing  			;# radio-propagation model
set opt(netif)          Phy/WirelessPhy/Wireless_802_11_Phy     ;# network interface type
set opt(mac)            Mac/802_11                		;# MAC type
set opt(ifq)            Queue/DropTail/PriQueue   		;# interface queue type
set opt(ll)             LL                        		;# link layer type
set opt(ant)            Antenna/DirAntenna       		;# antenna model
set opt(ifqlen)         1000                      		;# max packet in ifq
set val(rp)             WLSTATIC                      		;# routing protocol
set val(ni)		1					;# no of interfaces
set val(x)              130000                                    ;# grid X
set val(y)              130000                                    ;# grid Y
set val(lline)          -1                                        ;# landline
set val(nn)             100                         		;# number of mobilenodes
set val(size)           1400                                    ;#sizeof pkt
set val(loss)           0.05                                   ;#lossrate for uniform loss 
set val(pkt_dur)        0.00399                                 ;# time spent in a state in markov loss model 

#the value of landline and number of mobile nodes is set in topo.tcl

# Initialize Global Variables
set ns_		[new Simulator]
set tracefd     [open out.tr w]
$ns_ use-newtrace
$ns_ trace-all $tracefd

# set up topography object
set topo       [new Topography]
$topo load_flatgrid $val(x) $val(y)
# Create God
create-god $val(nn)

#configure node defaults
$ns_ node-config -adhocRouting $val(rp) \
                -llType $opt(ll) \
		-macType $opt(mac) \
		-ifqType $opt(ifq) \
		-ifqLen $opt(ifqlen) \
		-antType $opt(ant) \
		-propType $opt(prop) \
		-phyType $opt(netif) \
		-topoInstance $topo \
		-agentTrace ON \
		-routerTrace OFF \
		-macTrace ON \
		-movementTrace OFF \
		-numif $val(ni)	\
		-channel [new $opt(chan)] 
#                 -IncomingErrProc markov

proc uniform {} {
        global val
        set err [new ErrorModel]
        $err unit packet
        $err set rate_ $val(loss)
        $err drop-target [new Agent/Null]
        return $err
}

proc markov {} {
    global val
    set tmp [new ErrorModel]
    $tmp unit pkt
    $tmp set rate_ 0
    set tmp1 [new ErrorModel]
    $tmp1 unit pkt
    $tmp1 set rate_ 1
    set states [list $tmp $tmp1]
    set periods [list $val(pkt_dur) $val(pkt_dur)]
    set transmx {{0.99748 0.00252} {0.25 0.75}}
    set trunit pkt
    set sttype pkt
    set nstates 2
    set nstart $tmp
    set err [new ErrorModel/MultiState $states $periods $transmx $trunit $sttype $nstates $nstart]
    $err drop-target [new Agent/Null]
    return $err
}

proc create_node { x y z } {
	global ns_ val
	Mac/802_11 MAC_RTSThreshold 3000
	Mac/802_11 set dataRate_	11mb
	Mac/802_11 set basicRate_	1mb
	set newnode [$ns_ node]
	$newnode random-motion 0
	$newnode set X_ $x
	$newnode set Y_ $y
	$newnode set Z_ $z

	return $newnode
}


proc create_cbr_connection { from to startTime interval packetSize } {
	global ns_
	set udp0 [new Agent/UDP]
	set src [new Application/Traffic/CBR]
	$udp0 set packetSize_ $packetSize
	$src set packetSize_ $packetSize
	$src set interval_ $interval

	set sink [new Agent/Null]

	$ns_ attach-agent $from $udp0
	$src attach-agent $udp0
	$ns_ attach-agent $to $sink

	$ns_ connect $udp0 $sink
	$ns_ at $startTime "$src start"
	return $udp0
}

proc create_tcp_connection { from to startTime size file} {
    global ns_ 
    set tcp [new Agent/TCP/Newreno]
    set sink [new Agent/TCPSink]
    $tcp set packetSize_ $size
    $ns_ attach-agent $from $tcp
    $ns_ attach-agent $to $sink
    $ns_ connect $tcp $sink
    set ftp [new Application/FTP]
    $ftp attach-agent $tcp
    $ns_ at  $startTime "$ftp start"
    $tcp attach $file
    $tcp trace cwnd_
    $tcp trace dupacks_
    $tcp trace ack_
    $tcp trace maxseq_
    $tcp trace rtt_
    $tcp trace ndatapack_
    $tcp trace nrexmit_
    $tcp trace nrexmitpack_

}

#create nodes and routing entries
#source the necessary file generated by topo.cc
source topo.tcl

#create traffic
#for {set i 0} {$i < $val(nn) } {incr i} {
 #  if {$i == $val(lline)} {
#	continue
 #  }
   #set cbr$i [create_cbr_connection $node_($val(lline)) $node_($i) 0.0 0.002 $val(size) ];
  #  set tcp_par "tcp-output/$i"
   # set par($i) [open $tcp_par w]
   # set tcp$i [create_tcp_connection $node_($val(lline)) $node_($i) 0.0 $val(size) $par($i)]

#}

set cbr [create_cbr_connection $node_(0) $node_(1) 0.0 0.002 $val(size)];
set cbr [create_cbr_connection $node_(1) $node_(0) 0.0 0.002 $val(size)];

###########################################################
# Tell nodes when the simulation ends
###########################################################

for {set i 0} {$i < $val(nn) } {incr i} {
    $ns_ at 5.0 "$node_($i) reset";
}
$ns_ at 5.0 "stop"
$ns_ at 5.01 "puts \"NS EXITING...\" ; $ns_ halt"

proc stop {} {
    global ns_ tracefd par
    $ns_ flush-trace
    for {set i 0} {$i < $val(nn)} {incr i} {
	if {$i == $val(lline)} {
	    continue
	}
	close $par($i)
    }
    close $tracefd
}

puts "Starting Simulation..."
$ns_ run


